<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactWithDotNet</name>
    </assembly>
    <members>
        <member name="P:ReactWithDotNet.Mixin.TargetBlank">
            <summary>
                a.target = '_blank'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Href(System.String)">
            <summary>
                (a or link).href = <paramref name="href" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Target(System.String)">
            <summary>
                a.target = <paramref name="target" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Rel(System.String)">
            <summary>
                (a or link).href = <paramref name="value" />;
                <br/>
                <br/>
                Specifies the relationship between the current document and the linked document.
                <br />
                Only used if the href attribute is present.
                <br />
                Tip: Search engines can use this attribute to get more information about a link!
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.nbsp">
            <summary>
                Creates new non-breaking space
                <br />
                &amp;nbsp;
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.nbsp(System.Int32)">
            <summary>
                Creates new non-breaking space with given <paramref name="length" />
                <br />
                &amp;nbsp;
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.DispatchEvent(ReactWithDotNet.IFunctionalComponent,System.Delegate,System.String)">
            <summary>
                Dispatch given <paramref name="handlerFunc" />
                <br />
                Sample usage:
                <code> 
               static FC Counter(int Count, Func&lt;int, Task&gt; OnValueChange)
               {
                   var count = Count;
                  
                   return cmp =>
                   {
                       return new FlexColumn
                       {
                           new button(Padding(10))
                           {
                               $"{count}",
                               OnClick(OnClickHandler)
                           }
                       };
                  
                       Task OnClickHandler(MouseEvent e)
                       {
                           count++;
                   
                           cmp.DispatchEvent(OnValueChange, count);
                  
                           return Task.CompletedTask;
                       }
                   };
               }
            </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.DispatchEvent(ReactWithDotNet.IFunctionalComponent,System.Delegate,System.Object[],System.String)">
            <summary>
                Dispatch given <paramref name="handlerFunc" />
                <br />
                Sample usage:
                <code> 
               static FC Counter(int Count, Func&lt;int, Task&gt; OnValueChange)
               {
                   var count = Count;
                  
                   return cmp =>
                   {
                       return new FlexColumn
                       {
                           new button(Padding(10))
                           {
                               $"{count}",
                               OnClick(OnClickHandler)
                           }
                       };
                  
                       Task OnClickHandler(MouseEvent e)
                       {
                           count++;
                   
                           cmp.DispatchEvent(OnValueChange, [count]);
                  
                           return Task.CompletedTask;
                       }
                   };
               }
            </code>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexColumn">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexColumnReverse">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column-reverse"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexColumnCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexRow">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexRowReverse">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row-reverse"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexRowCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexColumn">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexColumnCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexRow">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexRowCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Flex(System.Int32,System.Int32,ReactWithDotNet.CssUnit)">
            <summary>
                Shorthand property for assign Flex properties
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Flex(System.Double)">
            <summary>
                style.flex = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WithStyle(ReactWithDotNet.Style)">
            <summary>
                Automatically generates a css class then adds class name to element.
                <br />
                You can use transition css
                <br />
                Generated css class will be automatically remove when component destroyed.
                <br />
                Example:
                <code>
                new ComponentX
                {
                   WithStyle([
                       Transition(nameof(Style.rotate), 400)
                   ])
                }
                </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Alt(System.String)">
            <summary>
                img.alt = <paramref name="alt" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Src(System.String)">
            <summary>
                img.src = <paramref name="src" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.LoadingLazy">
            <summary>
                img.loading = 'lazy'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.LoadingEager">
            <summary>
                img.loading = 'eager'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.NavigateTo(ReactWithDotNet.Client,System.String)">
            <summary>
                Example:
                <br />
                Client.NavigateTo("/") navigates to home page
                <br />
                Client.NavigateTo("/AboutUs") navigates to About Us page
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ClearBoth">
            <summary>
                style.clear = 'both'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ClearLeft">
            <summary>
                style.clear = 'left'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ClearRight">
            <summary>
                style.clear = 'right'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirectionLtr">
            <summary>
                style.direction = "ltr"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirectionRtl">
            <summary>
                style.direction = "rtl"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirLtr">
            <summary>
                element.dir = 'ltr'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirRtl">
            <summary>
                element.dir = 'rtl'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayBlock">
            <summary>
                style.display = 'block'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineBlock">
            <summary>
                style.display = inline-block
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlex">
            <summary>
                style.display = 'flex'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlex">
            <summary>
                style.display = 'inline-flex'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayNone">
            <summary>
                style.display = "none"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexDirectionColumnReverse">
            <summary>
                style.flexDirection = "column-reverse"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexDirectionRow">
            <summary>
                flexDirection = "row"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexDirectionRowReverse">
            <summary>
                flexDirection = "row-reverse"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FloatLeft">
            <summary>
                style.float = 'left'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FloatRight">
            <summary>
                style.float = 'right'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Height100vh">
            <summary>
                style.height = "100vh"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.HeightAuto">
            <summary>
                style.height = "auto"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentNormal">
            <summary>
                <para>justifyContent = "normal"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentCenter">
            <summary>
                <para>justifyContent = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentFlexEnd">
            <summary>
                <para>style.justifyContent = "flex-end"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentFlexStart">
            <summary>
                <para>style.justifyContent = "flex-start"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentSpaceAround">
            <summary>
                <para>style.justifyContent = "space-around"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentSpaceBetween">
            <summary>
                <para>style.justifyContent = "space-between"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentSpaceEvenly">
            <summary>
                <para>style.justifyContent = "space-evenly"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowHidden">
            <summary>
                overflow = "hidden"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowAuto">
            <summary>
                overflow = "auto"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowScroll">
            <summary>
                overflow = "scroll"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowWrapAnywhere">
            <summary>
                style.overflowWrap = 'anywhere'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowWrapNormal">
            <summary>
                style.overflowWrap = 'normal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYAuto">
            <summary>
                overflowY: auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXAuto">
            <summary>
                overflowX: auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXVisible">
            <summary>
                overflowX: visible
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYVisible">
            <summary>
                overflowY: visible
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYHidden">
            <summary>
                overflowY: hidden
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYScroll">
            <summary>
                overflowY: scroll
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXScroll">
            <summary>
                overflowX: scroll
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXHidden">
            <summary>
                overflowX: hidden
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextDecorationLineThrough">
            <summary>
                textDecoration = 'line-through'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextDecorationOverline">
            <summary>
                textDecoration = "overline"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextDecorationUnderline">
            <summary>
                textDecoration = "underline"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Width100vw">
            <summary>
                style.width = "100vw"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WidthFitContent">
            <summary>
                width: fit-content
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.HeightFitContent">
            <summary>
                height: fit-content
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackdropFilterBlur(System.Double)">
            <summary>
                style.backdropFilter = blur(px)
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundClipText">
            <summary>
                style.cackgroundClip = 'text'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundImage(System.String[])">
            <summary>
            The background-image property sets one or more background images for an element.
            <br/>
            By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally.
            <br/>
            style.backgroundImage = <paramref name="backgroundImages[0][0]"/>, <paramref name="backgroundImages[1][1]"/>, <paramref name="backgroundImages[...][...]"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Dir(System.String)">
            <summary>
                initialize dir attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexGrow(System.Double)">
            <summary>
                style.flexGrow = <paramref name="growValue" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexShrink(System.Double)">
            <summary>
                Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
                <br/>
                style.flexShrink = <paramref name="value" />
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexBasis(System.Double)">
            <summary>
                Specifies the initial length of a flexible item.
                <br/>
                style.flexBasis = <paramref name="value" /> + <b>px</b>
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexBasisAuto">
            <summary>
                Specifies the initial length of a flexible item.
                <br/>
                style.flexBasis = auto
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Float(System.String)">
            <summary>
                style.float = value
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Height0">
            <summary>
                style.height = 0px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TabIndex(System.String)">
            <summary>
                initialize tabIndex attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TabIndex(System.Int32)">
            <summary>
                initialize tabIndex attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Id(System.String)">
            <summary>
                initialize id attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Draggable(System.String)">
            <summary>
            Specifies whether an element is draggable or not.
            <br/>
            Tip: Links and images are draggable by default.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Id(System.Int32)">
            <summary>
                initialize id attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Id(System.Int64)">
            <summary>
                initialize id attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftBottom(System.String)">
            <summary>
                left = <paramref name="value"/>
                <br/>
                bottom = <paramref name="value"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftBottom(System.Double)">
            <summary>
                left = <paramref name="value"/> + 'px'
                <br/>
                bottom = <paramref name="value"/> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.RightBottom(System.String)">
            <summary>
                right = <paramref name="value"/>
                <br/>
                bottom = <paramref name="value"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.RightBottom(System.Double)">
            <summary>
                right = <paramref name="value"/> + 'px'
                <br/>
                bottom = <paramref name="value"/> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftRight(System.Double)">
            <summary>
                style.left = <paramref name="pixelValue" /> + 'px'
                <br />
                style.right = <paramref name="pixelValue" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftRightBottom(System.String)">
            <summary>
                style.left = <paramref name="value" /> 
                <br />
                style.right = <paramref name="value" />
                <br />
                style.bottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftRightBottom(System.Double)">
            <summary>
                style.left = <paramref name="value" /> + 'px'
                <br />
                style.right = <paramref name="value" /> + 'px'
                <br />
                style.bottom = <paramref name="value" /> + 'px'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ListStyleInside">
            <summary>
                style.listStyle = 'inside'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ListStyleNone">
            <summary>
                style.listStyle = 'none'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ListStyleSquare">
            <summary>
                style.listStyle = 'square'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxHeight(System.Double)">
            <summary>
                style.maxHeight = <paramref name="maxHeight" /> + "px"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxWidth(System.Double)">
            <summary>
                style.maxWidth = <paramref name="maxWidth" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinHeight(System.Double)">
            <summary>
                style.minHeight = <paramref name="minHeight" /> + "px"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinWidth(System.Double)">
            <summary>
                style.minWidth = minWidth + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Right(System.Double)">
            <summary>
                style.right = right + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Role(System.String)">
            <summary>
                Roles define the semantic meaning of content, allowing screen readers and other tools to present and support
                interaction with an object in a way that is consistent with user expectations of that type of object.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpaceX(ReactWithDotNet.CssUnit)">
            <summary>
                Creates new div element wihth given width
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpaceY(ReactWithDotNet.CssUnit)">
            <summary>
                Creates new div element wihth given height
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpaceY(ReactWithDotNet.CssUnit,System.ValueTuple{System.Func{ReactWithDotNet.StyleModifier[],ReactWithDotNet.StyleModifier},ReactWithDotNet.CssUnit}[])">
            <summary>
                Creates new div element wihth given height
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpaceX(ReactWithDotNet.CssUnit,System.ValueTuple{System.Func{ReactWithDotNet.StyleModifier[],ReactWithDotNet.StyleModifier},ReactWithDotNet.CssUnit}[])">
            <summary>
                Creates new div element wihth given width
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.DangerouslySetInnerHTML(System.String)">
            <summary>
                Assign dangerouslySetInnerHTML of given element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Title(System.String)">
            <summary>
                element.title = title
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TopBottom(System.Double)">
            <summary>
                style.top = <paramref name="pixelValue" /> + 'px'
                <br />
                style.bottom = <paramref name="pixelValue" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Boolean,ReactWithDotNet.StyleModifier[])">
            <summary>
                Apply given modifiers when condition is true
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Nullable{System.Boolean},System.Func{ReactWithDotNet.Element})">
            <summary>
                Calls given <paramref name="elementFunc" /> when condition is true otherwise returns null
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontSizeLarge">
            <summary>
                style.fontSize = 'large'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontSizeLarger">
            <summary>
                style.fontSize = 'larger'
                <br />
                Sets the font-size to a larger size than the parent element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontSizeSmall">
            <summary>
                style.fontSize = 'small'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontWeightExtraBold">
            <summary>
                style.fontWeight = '800'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontWeightMedium">
            <summary>
                style.fontWeight = '500'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontWeightSemiBold">
            <summary>
                style.fontWeight = '600'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.LetterSpacingNormal">
            <summary>
                style.letterSpacing = normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.MozOsxFontSmoothingGrayScale">
            <summary>
                <b>-moz-osx-font-smoothing</b> = grayscale
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WebkitFontSmoothingAntialiased">
            <summary>
                <b>-webkit-font-smoothing</b> = grayscale
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LetterSpacing(System.Double)">
            <summary>
                style.letterSpacing = <paramref name="letterSpacingAsPixel" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.String,System.String,System.String,System.Int32,System.Double,System.String)">
            <summary>
                [font-style] normal, italic, oblique
                <br/>
                [font-variant] normal, small-caps
                <br/>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [line-height] normal, 1.5, 120%
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.String,System.Double,System.Double,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [line-height] normal, 1.5, 120%
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.String,System.Double,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.Int32,System.Double,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.Int32,System.Double,System.Double,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [line-height] normal, 1.5, 120%
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.Int32,System.Double,System.Double,System.String,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [line-height] normal, 1.5, 120%
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.Int32,System.Double,System.String,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.String,System.Double,System.String,System.String)">
            <summary>
                [font-weight] normal, bold, lighter, bolder, 100-900
                <br/>
                [font-size] px, em, %, rem ...
                <br/>
                [font-family] "Arial", sans-serif, "Times New Roman", serif
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignItemsNormal">
            <summary>
                <para>style.alignItems = "normal"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignItemsCenter">
            <summary>
                <para>style.alignItems = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentCenter">
            <summary>
                <para>style.alignContent = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentFlexStart">
            <summary>
                <para>style.alignContent = "flex-start"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentFlexEnd">
            <summary>
                <para>style.alignContent = "flex-end"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentStretch">
            <summary>
                <para>style.alignContent = "stretch"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentSpaceAround">
            <summary>
                <para>style.alignContent = "space-around"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentSpaceBetween">
            <summary>
                <para>style.alignContent = "space-between"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfaAuto">
            <summary>
                <para>style.alignSelf = "auto"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfStretch">
            <summary>
                <para>style.alignSelf = "stretch"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfCenter">
            <summary>
                <para>style.alignSelf = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfFlexStart">
            <summary>
                <para>style.alignSelf = "flex-start"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfFlexEnd">
            <summary>
                <para>style.alignSelf = "flex-end"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfBaseline">
            <summary>
                <para>style.alignSelf = "baseline"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfInitial">
            <summary>
                <para>style.alignSelf = "initial"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfInherit">
            <summary>
                <para>style.alignSelf = "inherit"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpaceBreakSpaces">
            <summary>
                style.whiteSpace = break-spaces
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpaceNormal">
            <summary>
                style.whiteSpace = normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpaceNoWrap">
            <summary>
                style.whiteSpace = nowrap
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpacePre">
            <summary>
                style.whiteSpace = pre
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpacePreLine">
            <summary>
                style.whiteSpace = pre-line
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpacePreWrap">
            <summary>
                style.whiteSpace = pre-wrap
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakAll">
            <summary>
                <para>style.wordBreak = "break-all"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakKeepAll">
            <summary>
                <para>style.wordBreak = "keep-all"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakNormal">
            <summary>
                <para>style.wordBreak = "normal"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakWord">
            <summary>
                <para>style.wordBreak = "break-word"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordWrapNormal">
            <summary>
                style.wordWrap = normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordWrapBreakWord">
            <summary>
                style.wordWrap = break-word
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Opacity0">
            <summary>
                style.opacity = 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Opacity1">
            <summary>
                style.opacity = 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextTransformCapitalize">
            <summary>
                style.textTransform = 'capitalize'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextTransformLowerCase">
            <summary>
                style.textTransform = 'lowercase'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextTransformUpperCase">
            <summary>
                style.textTransform = 'uppercase'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.VisibilityCollapse">
            <summary>
                style.visibility = 'collapse'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.VisibilityHidden">
            <summary>
                style.visibility = 'hidden'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.VisibilityVisible">
            <summary>
                style.visibility = 'visible'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Opacity(System.Double)">
            <summary>
                style.opacity = <paramref name="opacity" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double,System.Double)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="delayAsMilliseconds" />}ms
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double,System.String)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="easingFunction" />}
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.Func{System.String,ReactWithDotNet.StyleModifier},System.Double,System.String)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="easingFunction" />}
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double,System.String,System.Double)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="easingFunction" />} {<paramref name="delayAsMilliseconds" />}ms
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LG(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 1024px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MD(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 768px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SM(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 640px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaWidthBetween(System.Int32,System.Int32,ReactWithDotNet.StyleModifier[])">
            <summary>
                (min-width: <paramref name="minWidthAsPixel" /> + 'px') and (max-width: <paramref name="maxWidthAsPixel" /> + 'px')
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaMinWidth(System.Int32,ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: <paramref name="widthAsPixel" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaMinWidth(System.Func{ReactWithDotNet.StyleModifier[],ReactWithDotNet.StyleModifier},ReactWithDotNet.StyleModifier[])">
            <summary>
                Sample Usage:
                <code>
                 WhenMediaMinWidth(SM, BorderRadius(8))
                </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaMaxWidth(System.Int32,ReactWithDotNet.StyleModifier[])">
            <summary>
                max-width: <paramref name="widthAsPixel" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaMaxWidth(System.Func{ReactWithDotNet.StyleModifier[],ReactWithDotNet.StyleModifier},ReactWithDotNet.StyleModifier[])">
            <summary>
                Sample Usage:
                <code>
                 WhenMediaMaxWidth(SM, BorderRadius(8))
                </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.XL(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 1280px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.XXL(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 1536px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Border(System.Double,System.String,System.String,System.Double)">
            <summary>
               style.border = <paramref name="widthAsPixel"/>+px <paramref name="borderStyle"/> <paramref name="color"/>
               <br/>
               style.borderRadius = <paramref name="borderRadiusAsPixel"/>+px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextIndent(System.Double)">
            <summary>
            specifies the indentation of the first line in a text-block
            <br/>
            style.textIndent = <paramref name="valueInPixel"/> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopRight(System.String)">
            <summary>
                style.borderTop = <paramref name="borderValue"/>
            <br/>
                style.borderRight = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftTop(System.String)">
            <summary>
                style.borderLeft = <paramref name="borderValue"/>
            <br/>
                style.borderTop = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRightBottom(System.String)">
            <summary>
                style.borderRight = <paramref name="borderValue"/>
            <br/>
                style.borderBottom = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftBottom(System.String)">
            <summary>
                style.borderLeft = <paramref name="borderValue"/>
            <br/>
                style.borderBottom = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopBottom(System.String)">
            <summary>
                style.borderTop = <paramref name="borderValue"/>
            <br/>
                style.borderBottom = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftRight(System.String)">
            <summary>
                style.borderLeft = <paramref name="borderValue"/>
            <br/>
                style.borderRight = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BoxShadowNone">
            <summary>
                style.boxShadow = <strong>none</strong>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Dashed(System.Double,System.String)">
            <summary>
                Returns a string like <paramref name="widthAsPx" /><b> + px dashed + </b> <paramref name="color" />"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Dotted(System.Double,System.String)">
            <summary>
                Returns a string like <paramref name="widthAsPx" /><b> + px dotted + </b> <paramref name="color" />"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Solid(System.Double,System.String)">
            <summary>
                Returns a string like <paramref name="widthAsPx" /><b> + px solid + </b> <paramref name="color" />"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderWidth(System.Double)">
            <summary>
                style.borderWidth = <paramref name="widthAsPx" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.url(System.String)">
            <summary>
            "url(urlValue)
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OutlineNone">
            <summary>
                style.outline = none
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BorderCollapseCollapse">
            <summary>
                style.borderCollapse = collapse
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BorderCollapseSeparate">
            <summary>
                style.borderCollapse = separate
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CellPadding(System.Nullable{System.Double})">
            <summary>
                table.cellPadding = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColSpan(System.Int32)">
            <summary>
                (tr-td).colSpan = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.RowSpan(System.Int32)">
            <summary>
                (tr-td).rowSpan = <paramref name="value" />
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.percent">
            <summary>
                50*percent returns like '50%'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.rem">
            <summary>
                2*rem returns like '2rem'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.vh">
            <summary>
                7*vh returns like '7vh'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.vw">
            <summary>
                7*vw returns like '7vw'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.px">
            <summary>
                2*px returns like '2px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.linear_gradient(System.Int32,System.String,System.String)">
            <summary>
                'linear-gradient(<paramref name="degree" /><b>+deg</b>, <paramref name="fromColor" />, <paramref name="toColor" />
                )'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.linear_gradientTo(System.String,System.String,System.String,System.String)">
            <summary>
                'linear-gradient(<b>to </b><paramref name="directionFrom" /> <paramref name="directionTo" />,
                <paramref name="fromColor" />, <paramref name="toColor" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.linear_gradientTo(System.String,System.String,System.String)">
            <summary>
                'linear-gradient(<b>to </b> <paramref name="targetDirection" />,
                <paramref name="fromColor" />, <paramref name="toColor" />)'
                <code>
                 Example:
                    new div
                    {
                        BackgroundImage(linear_gradientTo("right","#8490ff","#a3eeff"))
                    }
                </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.rgb(System.Double,System.Double,System.Double)">
            <summary>
                Return new string as 'rgb(<paramref name="red" />, <paramref name="green" />, <paramref name="blue" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.rgba(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Return new string as 'rgb(<paramref name="red" />, <paramref name="green" />, <paramref name="blue" />,
                <paramref name="alpha" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.hsl(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
                Return new string as 'hsl(<paramref name="hue" />, <paramref name="saturation" />, <paramref name="lightness" />,
                <paramref name="alpha" />)'
            </summary>
            <param name="hue">Defines a degree on the color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue</param>
            <param name="saturation">Defines the saturation; 0% is a shade of gray and 100% is the full color (full saturation)</param>
            <param name="lightness">Defines the lightness; 0% is black, 50% is normal, and 100% is white</param>
            <param name="alpha">Defines the opacity as a number between 0.0 (fully transparent) and 1.0 (fully opaque)</param>
        </member>
        <member name="M:ReactWithDotNet.Mixin.hsla(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
                Return new string as 'hsl(<paramref name="hue" />, <paramref name="saturation" />, <paramref name="lightness" />,
                <paramref name="alpha" />)'
            </summary>
            <param name="hue">Defines a degree on the color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue</param>
            <param name="saturation">Defines the saturation; 0% is a shade of gray and 100% is the full color (full saturation)</param>
            <param name="lightness">Defines the lightness; 0% is black, 50% is normal, and 100% is white</param>
            <param name="alpha">Defines the opacity as a number between 0.0 (fully transparent) and 1.0 (fully opaque)</param>
        </member>
        <member name="M:ReactWithDotNet.Mixin.cubic_bezier(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                cubic-bezier(<paramref name="x1"/>, <paramref name="y1"/>, <paramref name="x2"/>, <paramref name="y2"/>)
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatInherit">
            <summary>
                style.backgroundRepeat = inherit
                <br />
                Inherits this property from its parent element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatInitial">
            <summary>
                style.backgroundRepeat = initial
                <br />
                Sets this property to its default value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatNoRepeat">
            <summary>
                style.backgroundRepeat = no-repeat
                <br />
                The background-image is not repeated. The image will only be shown once
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRepeat">
            <summary>
                style.backgroundRepeat = repeat
                <br />
                The background image is repeated both vertically and horizontally.  The last image will be clipped if it does not
                fit. This is default
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRepeatX">
            <summary>
                style.backgroundRepeat = repeat-x
                <br />
                The background image is repeated only horizontally
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRepeatY">
            <summary>
                style.backgroundRepeat = repeat-y
                <br />
                The background image is repeated only vertically
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRound">
            <summary>
                style.backgroundRepeat = round
                <br />
                The background-image is repeated and squished or stretched to fill the space (no gaps)
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatSpace">
            <summary>
                style.backgroundRepeat = space
                <br />
                The background-image is repeated as much as possible without clipping. The first and last image is pinned to either
                side of the element, and whitespace is distributed evenly between the images
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundSizeContain">
            <summary>
                style.backgroundSize = contain
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundSizeCover">
            <summary>
                style.backgroundSize = cover
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitContain">
            <summary>
                The image keeps its aspect ratio, but is resized to fit within the given dimension
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitCover">
            <summary>
                The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitFill">
            <summary>
                This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or
                squished to fit
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitNone">
            <summary>
                The image is not resized
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitScaleDown">
            <summary>
                the image is scaled down to the smallest version of none or contain
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Size(System.Double,System.Double)">
            <summary>
                style.width = <paramref name="width" /> + 'px'
                <br/>
                style.height = <paramref name="height" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Size(System.String,System.String)">
            <summary>
                style.width = <paramref name="width" />
                <br/>
                style.height = <paramref name="height" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinSize(System.Double,System.Double)">
            <summary>
                style.minWidth = <paramref name="minWidth" /> + 'px'
                <br/>
                style.minHeight = <paramref name="minHeight" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinSize(System.Double)">
            <summary>
                style.minWidth = <paramref name="width_and_height" /> + 'px'
                <br/>
                style.minHeight = <paramref name="width_and_height" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Size(System.Double)">
            <summary>
                style.width = <paramref name="width_and_height" /> + 'px'
                <br/>
                style.height = <paramref name="width_and_height" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Width(System.Double,System.Double)">
            <summary>
                width: <paramref name="percentOfTotal"/> / <paramref name="total"/> * 100 + '%'
                <br/>Example:<br/>
                Width(3, 4) means Width("75%")
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Height(System.Double,System.Double)">
            <summary>
                height:  <paramref name="percentOfTotal"/> / <paramref name="total"/> * 100 + '%'
                <br/>Example:<br/>
                Height(3, 4) means Height("75%")
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.SizeFull">
            <summary>
                width: 100%
                <br />
                height: 100%
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.SizeFitContent">
            <summary>
                width: fit-content
                <br />
                height: fit-content
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.SizeMaxContent">
            <summary>
                width: max-content
                <br />
                height: max-content
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.SizeMinContent">
            <summary>
                width: min-content
                <br />
                height: min-content
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.HeightFull">
            <summary>
                height: 100%
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WidthFull">
            <summary>
                width: 100%
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Inset0">
            <summary>
                inset: "0"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AccentColor(System.String)">
            <summary>
                style.accentColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AdditiveSymbols(System.String)">
            <summary>
                style.additiveSymbols = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AlignContent(System.String)">
            <summary>
                style.alignContent = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AlignItems(System.String)">
            <summary>
                style.alignItems = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AlignSelf(System.String)">
            <summary>
                style.alignSelf = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AlignmentBaseline(System.String)">
            <summary>
                style.alignmentBaseline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.All(System.String)">
            <summary>
                style.all = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Animation(System.String)">
            <summary>
                style.animation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationComposition(System.String)">
            <summary>
                style.animationComposition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationDelay(System.String)">
            <summary>
                style.animationDelay = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationDirection(System.String)">
            <summary>
                style.animationDirection = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationDuration(System.String)">
            <summary>
                style.animationDuration = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationFillMode(System.String)">
            <summary>
                style.animationFillMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationIterationCount(System.String)">
            <summary>
                style.animationIterationCount = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationName(System.String)">
            <summary>
                style.animationName = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationPlayState(System.String)">
            <summary>
                style.animationPlayState = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationRange(System.String)">
            <summary>
                style.animationRange = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationRangeEnd(System.String)">
            <summary>
                style.animationRangeEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationRangeStart(System.String)">
            <summary>
                style.animationRangeStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationTimeline(System.String)">
            <summary>
                style.animationTimeline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AnimationTimingFunction(System.String)">
            <summary>
                style.animationTimingFunction = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AppRegion(System.String)">
            <summary>
                style.appRegion = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Appearance(System.String)">
            <summary>
                style.appearance = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AscentOverride(System.String)">
            <summary>
                style.ascentOverride = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AspectRatio(System.String)">
            <summary>
                style.aspectRatio = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackdropFilter(System.String)">
            <summary>
                style.backdropFilter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackfaceVisibility(System.String)">
            <summary>
                style.backfaceVisibility = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Background(System.String)">
            <summary>
                style.background = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundAttachment(System.String)">
            <summary>
                style.backgroundAttachment = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundBlendMode(System.String)">
            <summary>
                style.backgroundBlendMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundClip(System.String)">
            <summary>
                style.backgroundClip = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundColor(System.String)">
            <summary>
                style.backgroundColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundImage(System.String)">
            <summary>
                style.backgroundImage = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundOrigin(System.String)">
            <summary>
                style.backgroundOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundPosition(System.String)">
            <summary>
                style.backgroundPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundPositionX(System.String)">
            <summary>
                style.backgroundPositionX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundPositionY(System.String)">
            <summary>
                style.backgroundPositionY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundRepeat(System.String)">
            <summary>
                style.backgroundRepeat = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundRepeatX(System.String)">
            <summary>
                style.backgroundRepeatX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundRepeatY(System.String)">
            <summary>
                style.backgroundRepeatY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundSize(System.String)">
            <summary>
                style.backgroundSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BasePalette(System.String)">
            <summary>
                style.basePalette = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BaselineShift(System.String)">
            <summary>
                style.baselineShift = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BaselineSource(System.String)">
            <summary>
                style.baselineSource = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BlockSize(System.String)">
            <summary>
                style.blockSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Border(System.String)">
            <summary>
                style.border = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlock(System.String)">
            <summary>
                style.borderBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockColor(System.String)">
            <summary>
                style.borderBlockColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockEnd(System.String)">
            <summary>
                style.borderBlockEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockEndColor(System.String)">
            <summary>
                style.borderBlockEndColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockEndStyle(System.String)">
            <summary>
                style.borderBlockEndStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockEndWidth(System.String)">
            <summary>
                style.borderBlockEndWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockStart(System.String)">
            <summary>
                style.borderBlockStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockStartColor(System.String)">
            <summary>
                style.borderBlockStartColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockStartStyle(System.String)">
            <summary>
                style.borderBlockStartStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockStartWidth(System.String)">
            <summary>
                style.borderBlockStartWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockStyle(System.String)">
            <summary>
                style.borderBlockStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBlockWidth(System.String)">
            <summary>
                style.borderBlockWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBottom(System.String)">
            <summary>
                style.borderBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBottomColor(System.String)">
            <summary>
                style.borderBottomColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBottomLeftRadius(System.String)">
            <summary>
                style.borderBottomLeftRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBottomRightRadius(System.String)">
            <summary>
                style.borderBottomRightRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBottomStyle(System.String)">
            <summary>
                style.borderBottomStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderBottomWidth(System.String)">
            <summary>
                style.borderBottomWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderCollapse(System.String)">
            <summary>
                style.borderCollapse = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderColor(System.String)">
            <summary>
                style.borderColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderEndEndRadius(System.String)">
            <summary>
                style.borderEndEndRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderEndStartRadius(System.String)">
            <summary>
                style.borderEndStartRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImage(System.String)">
            <summary>
                style.borderImage = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageOutset(System.String)">
            <summary>
                style.borderImageOutset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageOutset(System.Double)">
            <summary>
                style.borderImageOutset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageRepeat(System.String)">
            <summary>
                style.borderImageRepeat = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageSlice(System.String)">
            <summary>
                style.borderImageSlice = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageSource(System.String)">
            <summary>
                style.borderImageSource = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageWidth(System.String)">
            <summary>
                style.borderImageWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderImageWidth(System.Double)">
            <summary>
                style.borderImageWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInline(System.String)">
            <summary>
                style.borderInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineColor(System.String)">
            <summary>
                style.borderInlineColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineEnd(System.String)">
            <summary>
                style.borderInlineEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineEndColor(System.String)">
            <summary>
                style.borderInlineEndColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineEndStyle(System.String)">
            <summary>
                style.borderInlineEndStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineEndWidth(System.String)">
            <summary>
                style.borderInlineEndWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineStart(System.String)">
            <summary>
                style.borderInlineStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineStartColor(System.String)">
            <summary>
                style.borderInlineStartColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineStartStyle(System.String)">
            <summary>
                style.borderInlineStartStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineStartWidth(System.String)">
            <summary>
                style.borderInlineStartWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineStyle(System.String)">
            <summary>
                style.borderInlineStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderInlineWidth(System.String)">
            <summary>
                style.borderInlineWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeft(System.String)">
            <summary>
                style.borderLeft = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftColor(System.String)">
            <summary>
                style.borderLeftColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftStyle(System.String)">
            <summary>
                style.borderLeftStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftWidth(System.String)">
            <summary>
                style.borderLeftWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRadius(System.String)">
            <summary>
                style.borderRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRight(System.String)">
            <summary>
                style.borderRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRightColor(System.String)">
            <summary>
                style.borderRightColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRightStyle(System.String)">
            <summary>
                style.borderRightStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRightWidth(System.String)">
            <summary>
                style.borderRightWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderSpacing(System.String)">
            <summary>
                style.borderSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderStartEndRadius(System.String)">
            <summary>
                style.borderStartEndRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderStartStartRadius(System.String)">
            <summary>
                style.borderStartStartRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderStyle(System.String)">
            <summary>
                style.borderStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTop(System.String)">
            <summary>
                style.borderTop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopColor(System.String)">
            <summary>
                style.borderTopColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopLeftRadius(System.String)">
            <summary>
                style.borderTopLeftRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopRightRadius(System.String)">
            <summary>
                style.borderTopRightRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopStyle(System.String)">
            <summary>
                style.borderTopStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopWidth(System.String)">
            <summary>
                style.borderTopWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderWidth(System.String)">
            <summary>
                style.borderWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Bottom(System.String)">
            <summary>
                style.bottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BoxShadow(System.String)">
            <summary>
                style.boxShadow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BoxSizing(System.String)">
            <summary>
                style.boxSizing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BreakAfter(System.String)">
            <summary>
                style.breakAfter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BreakBefore(System.String)">
            <summary>
                style.breakBefore = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BreakInside(System.String)">
            <summary>
                style.breakInside = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BufferedRendering(System.String)">
            <summary>
                style.bufferedRendering = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CaptionSide(System.String)">
            <summary>
                style.captionSide = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CaretColor(System.String)">
            <summary>
                style.caretColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Clear(System.String)">
            <summary>
                style.clear = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Clip(System.String)">
            <summary>
                style.clip = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ClipPath(System.String)">
            <summary>
                style.clipPath = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ClipPath(System.Double)">
            <summary>
                style.clipPath = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ClipRule(System.String)">
            <summary>
                style.clipRule = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Color(System.String)">
            <summary>
                style.color = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColorInterpolation(System.String)">
            <summary>
                style.colorInterpolation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColorInterpolationFilters(System.String)">
            <summary>
                style.colorInterpolationFilters = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColorRendering(System.String)">
            <summary>
                style.colorRendering = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColorScheme(System.String)">
            <summary>
                style.colorScheme = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnCount(System.String)">
            <summary>
                style.columnCount = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnFill(System.String)">
            <summary>
                style.columnFill = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnGap(System.String)">
            <summary>
                style.columnGap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnRule(System.String)">
            <summary>
                style.columnRule = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnRuleColor(System.String)">
            <summary>
                style.columnRuleColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnRuleStyle(System.String)">
            <summary>
                style.columnRuleStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnRuleWidth(System.String)">
            <summary>
                style.columnRuleWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnSpan(System.String)">
            <summary>
                style.columnSpan = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColumnWidth(System.String)">
            <summary>
                style.columnWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Columns(System.String)">
            <summary>
                style.columns = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Contain(System.String)">
            <summary>
                style.contain = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainIntrinsicBlockSize(System.String)">
            <summary>
                style.containIntrinsicBlockSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainIntrinsicHeight(System.String)">
            <summary>
                style.containIntrinsicHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainIntrinsicInlineSize(System.String)">
            <summary>
                style.containIntrinsicInlineSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainIntrinsicSize(System.String)">
            <summary>
                style.containIntrinsicSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainIntrinsicWidth(System.String)">
            <summary>
                style.containIntrinsicWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Container(System.String)">
            <summary>
                style.container = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainerName(System.String)">
            <summary>
                style.containerName = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContainerType(System.String)">
            <summary>
                style.containerType = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Content(System.String)">
            <summary>
                style.content = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ContentVisibility(System.String)">
            <summary>
                style.contentVisibility = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CounterIncrement(System.String)">
            <summary>
                style.counterIncrement = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CounterReset(System.String)">
            <summary>
                style.counterReset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CounterSet(System.String)">
            <summary>
                style.counterSet = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Cursor(System.String)">
            <summary>
                style.cursor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Cx(System.String)">
            <summary>
                style.cx = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Cy(System.String)">
            <summary>
                style.cy = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.D(System.String)">
            <summary>
                style.d = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.DescentOverride(System.String)">
            <summary>
                style.descentOverride = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Direction(System.String)">
            <summary>
                style.direction = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Display(System.String)">
            <summary>
                style.display = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.DominantBaseline(System.String)">
            <summary>
                style.dominantBaseline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.EmptyCells(System.String)">
            <summary>
                style.emptyCells = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Fallback(System.String)">
            <summary>
                style.fallback = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Fill(System.String)">
            <summary>
                style.fill = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Fill(System.Double)">
            <summary>
                style.fill = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FillOpacity(System.String)">
            <summary>
                style.fillOpacity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FillRule(System.String)">
            <summary>
                style.fillRule = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Filter(System.String)">
            <summary>
                style.filter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Flex(System.String)">
            <summary>
                style.flex = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexBasis(System.String)">
            <summary>
                style.flexBasis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexDirection(System.String)">
            <summary>
                style.flexDirection = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexFlow(System.String)">
            <summary>
                style.flexFlow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexGrow(System.String)">
            <summary>
                style.flexGrow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexShrink(System.String)">
            <summary>
                style.flexShrink = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.float(System.String)">
            <summary>
                style.@float = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FloodColor(System.String)">
            <summary>
                style.floodColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FloodOpacity(System.String)">
            <summary>
                style.floodOpacity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Font(System.String)">
            <summary>
                style.font = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontDisplay(System.String)">
            <summary>
                style.fontDisplay = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontFamily(System.String)">
            <summary>
                style.fontFamily = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontFeatureSettings(System.String)">
            <summary>
                style.fontFeatureSettings = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontKerning(System.String)">
            <summary>
                style.fontKerning = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontOpticalSizing(System.String)">
            <summary>
                style.fontOpticalSizing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontPalette(System.String)">
            <summary>
                style.fontPalette = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontSize(System.String)">
            <summary>
                style.fontSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontStretch(System.String)">
            <summary>
                style.fontStretch = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontStyle(System.String)">
            <summary>
                style.fontStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontSynthesis(System.String)">
            <summary>
                style.fontSynthesis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontSynthesisSmallCaps(System.String)">
            <summary>
                style.fontSynthesisSmallCaps = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontSynthesisStyle(System.String)">
            <summary>
                style.fontSynthesisStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontSynthesisWeight(System.String)">
            <summary>
                style.fontSynthesisWeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariant(System.String)">
            <summary>
                style.fontVariant = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariantAlternates(System.String)">
            <summary>
                style.fontVariantAlternates = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariantCaps(System.String)">
            <summary>
                style.fontVariantCaps = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariantEastAsian(System.String)">
            <summary>
                style.fontVariantEastAsian = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariantLigatures(System.String)">
            <summary>
                style.fontVariantLigatures = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariantNumeric(System.String)">
            <summary>
                style.fontVariantNumeric = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariantPosition(System.String)">
            <summary>
                style.fontVariantPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontVariationSettings(System.String)">
            <summary>
                style.fontVariationSettings = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontWeight(System.String)">
            <summary>
                style.fontWeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ForcedColorAdjust(System.String)">
            <summary>
                style.forcedColorAdjust = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Gap(System.String)">
            <summary>
                style.gap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Grid(System.String)">
            <summary>
                style.grid = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridArea(System.String)">
            <summary>
                style.gridArea = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridAutoColumns(System.String)">
            <summary>
                style.gridAutoColumns = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridAutoFlow(System.String)">
            <summary>
                style.gridAutoFlow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridAutoRows(System.String)">
            <summary>
                style.gridAutoRows = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridColumn(System.String)">
            <summary>
                style.gridColumn = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridColumnEnd(System.String)">
            <summary>
                style.gridColumnEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridColumnGap(System.String)">
            <summary>
                style.gridColumnGap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridColumnStart(System.String)">
            <summary>
                style.gridColumnStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridGap(System.String)">
            <summary>
                style.gridGap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridRow(System.String)">
            <summary>
                style.gridRow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridRowEnd(System.String)">
            <summary>
                style.gridRowEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridRowGap(System.String)">
            <summary>
                style.gridRowGap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridRowStart(System.String)">
            <summary>
                style.gridRowStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridTemplate(System.String)">
            <summary>
                style.gridTemplate = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridTemplateAreas(System.String)">
            <summary>
                style.gridTemplateAreas = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridTemplateColumns(System.String)">
            <summary>
                style.gridTemplateColumns = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridTemplateRows(System.String)">
            <summary>
                style.gridTemplateRows = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Height(System.String)">
            <summary>
                style.height = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.HyphenateCharacter(System.String)">
            <summary>
                style.hyphenateCharacter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.HyphenateLimitChars(System.String)">
            <summary>
                style.hyphenateLimitChars = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Hyphens(System.String)">
            <summary>
                style.hyphens = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ImageOrientation(System.String)">
            <summary>
                style.imageOrientation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ImageRendering(System.String)">
            <summary>
                style.imageRendering = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Inherits(System.String)">
            <summary>
                style.inherits = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InitialLetter(System.String)">
            <summary>
                style.initialLetter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InitialValue(System.String)">
            <summary>
                style.initialValue = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InlineSize(System.String)">
            <summary>
                style.inlineSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Inset(System.String)">
            <summary>
                style.inset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InsetBlock(System.String)">
            <summary>
                style.insetBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InsetBlockEnd(System.String)">
            <summary>
                style.insetBlockEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InsetBlockStart(System.String)">
            <summary>
                style.insetBlockStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InsetInline(System.String)">
            <summary>
                style.insetInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InsetInlineEnd(System.String)">
            <summary>
                style.insetInlineEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.InsetInlineStart(System.String)">
            <summary>
                style.insetInlineStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Isolation(System.String)">
            <summary>
                style.isolation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.JustifyContent(System.String)">
            <summary>
                style.justifyContent = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.JustifyItems(System.String)">
            <summary>
                style.justifyItems = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.JustifySelf(System.String)">
            <summary>
                style.justifySelf = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Left(System.String)">
            <summary>
                style.left = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LetterSpacing(System.String)">
            <summary>
                style.letterSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LightingColor(System.String)">
            <summary>
                style.lightingColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LineBreak(System.String)">
            <summary>
                style.lineBreak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LineGapOverride(System.String)">
            <summary>
                style.lineGapOverride = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LineHeight(System.String)">
            <summary>
                style.lineHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyle(System.String)">
            <summary>
                style.listStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyleImage(System.String)">
            <summary>
                style.listStyleImage = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStylePosition(System.String)">
            <summary>
                style.listStylePosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyleType(System.String)">
            <summary>
                style.listStyleType = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Margin(System.String)">
            <summary>
                style.margin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginBlock(System.String)">
            <summary>
                style.marginBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginBlockEnd(System.String)">
            <summary>
                style.marginBlockEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginBlockStart(System.String)">
            <summary>
                style.marginBlockStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginBottom(System.String)">
            <summary>
                style.marginBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginInline(System.String)">
            <summary>
                style.marginInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginInlineEnd(System.String)">
            <summary>
                style.marginInlineEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginInlineStart(System.String)">
            <summary>
                style.marginInlineStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginLeft(System.String)">
            <summary>
                style.marginLeft = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginRight(System.String)">
            <summary>
                style.marginRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarginTop(System.String)">
            <summary>
                style.marginTop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Marker(System.String)">
            <summary>
                style.marker = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarkerEnd(System.String)">
            <summary>
                style.markerEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarkerMid(System.String)">
            <summary>
                style.markerMid = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MarkerStart(System.String)">
            <summary>
                style.markerStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Mask(System.String)">
            <summary>
                style.mask = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaskType(System.String)">
            <summary>
                style.maskType = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MathDepth(System.String)">
            <summary>
                style.mathDepth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MathShift(System.String)">
            <summary>
                style.mathShift = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MathStyle(System.String)">
            <summary>
                style.mathStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxBlockSize(System.String)">
            <summary>
                style.maxBlockSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxHeight(System.String)">
            <summary>
                style.maxHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxInlineSize(System.String)">
            <summary>
                style.maxInlineSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxWidth(System.String)">
            <summary>
                style.maxWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinBlockSize(System.String)">
            <summary>
                style.minBlockSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinHeight(System.String)">
            <summary>
                style.minHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinInlineSize(System.String)">
            <summary>
                style.minInlineSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinWidth(System.String)">
            <summary>
                style.minWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MixBlendMode(System.String)">
            <summary>
                style.mixBlendMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Negative(System.String)">
            <summary>
                style.negative = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ObjectFit(System.String)">
            <summary>
                style.objectFit = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ObjectPosition(System.String)">
            <summary>
                style.objectPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ObjectViewBox(System.String)">
            <summary>
                style.objectViewBox = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Offset(System.String)">
            <summary>
                style.offset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OffsetAnchor(System.String)">
            <summary>
                style.offsetAnchor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OffsetDistance(System.String)">
            <summary>
                style.offsetDistance = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OffsetPath(System.String)">
            <summary>
                style.offsetPath = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OffsetPosition(System.String)">
            <summary>
                style.offsetPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OffsetRotate(System.String)">
            <summary>
                style.offsetRotate = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Opacity(System.String)">
            <summary>
                style.opacity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Order(System.String)">
            <summary>
                style.order = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Orphans(System.String)">
            <summary>
                style.orphans = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Outline(System.String)">
            <summary>
                style.outline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OutlineColor(System.String)">
            <summary>
                style.outlineColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OutlineOffset(System.String)">
            <summary>
                style.outlineOffset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OutlineStyle(System.String)">
            <summary>
                style.outlineStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OutlineWidth(System.String)">
            <summary>
                style.outlineWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Overflow(System.String)">
            <summary>
                style.overflow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverflowAnchor(System.String)">
            <summary>
                style.overflowAnchor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverflowClipMargin(System.String)">
            <summary>
                style.overflowClipMargin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverflowWrap(System.String)">
            <summary>
                style.overflowWrap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverflowX(System.String)">
            <summary>
                style.overflowX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverflowY(System.String)">
            <summary>
                style.overflowY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Overlay(System.String)">
            <summary>
                style.overlay = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverrideColors(System.String)">
            <summary>
                style.overrideColors = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverscrollBehavior(System.String)">
            <summary>
                style.overscrollBehavior = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverscrollBehaviorBlock(System.String)">
            <summary>
                style.overscrollBehaviorBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverscrollBehaviorInline(System.String)">
            <summary>
                style.overscrollBehaviorInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverscrollBehaviorX(System.String)">
            <summary>
                style.overscrollBehaviorX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverscrollBehaviorY(System.String)">
            <summary>
                style.overscrollBehaviorY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Pad(System.String)">
            <summary>
                style.pad = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Padding(System.String)">
            <summary>
                style.padding = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingBlock(System.String)">
            <summary>
                style.paddingBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingBlockEnd(System.String)">
            <summary>
                style.paddingBlockEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingBlockStart(System.String)">
            <summary>
                style.paddingBlockStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingBottom(System.String)">
            <summary>
                style.paddingBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingInline(System.String)">
            <summary>
                style.paddingInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingInlineEnd(System.String)">
            <summary>
                style.paddingInlineEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingInlineStart(System.String)">
            <summary>
                style.paddingInlineStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingLeft(System.String)">
            <summary>
                style.paddingLeft = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingRight(System.String)">
            <summary>
                style.paddingRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaddingTop(System.String)">
            <summary>
                style.paddingTop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Page(System.String)">
            <summary>
                style.page = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PageBreakAfter(System.String)">
            <summary>
                style.pageBreakAfter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PageBreakBefore(System.String)">
            <summary>
                style.pageBreakBefore = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PageBreakInside(System.String)">
            <summary>
                style.pageBreakInside = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PageOrientation(System.String)">
            <summary>
                style.pageOrientation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PaintOrder(System.String)">
            <summary>
                style.paintOrder = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Perspective(System.String)">
            <summary>
                style.perspective = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PerspectiveOrigin(System.String)">
            <summary>
                style.perspectiveOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PlaceContent(System.String)">
            <summary>
                style.placeContent = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PlaceItems(System.String)">
            <summary>
                style.placeItems = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PlaceSelf(System.String)">
            <summary>
                style.placeSelf = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.PointerEvents(System.String)">
            <summary>
                style.pointerEvents = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Position(System.String)">
            <summary>
                style.position = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Prefix(System.String)">
            <summary>
                style.prefix = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Quotes(System.String)">
            <summary>
                style.quotes = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.R(System.String)">
            <summary>
                style.r = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Range(System.String)">
            <summary>
                style.range = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Resize(System.String)">
            <summary>
                style.resize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Right(System.String)">
            <summary>
                style.right = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Rotate(System.String)">
            <summary>
                style.rotate = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.RowGap(System.String)">
            <summary>
                style.rowGap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.RubyPosition(System.String)">
            <summary>
                style.rubyPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Rx(System.String)">
            <summary>
                style.rx = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Ry(System.String)">
            <summary>
                style.ry = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Scale(System.String)">
            <summary>
                style.scale = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollBehavior(System.String)">
            <summary>
                style.scrollBehavior = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMargin(System.String)">
            <summary>
                style.scrollMargin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginBlock(System.String)">
            <summary>
                style.scrollMarginBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginBlockEnd(System.String)">
            <summary>
                style.scrollMarginBlockEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginBlockStart(System.String)">
            <summary>
                style.scrollMarginBlockStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginBottom(System.String)">
            <summary>
                style.scrollMarginBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginInline(System.String)">
            <summary>
                style.scrollMarginInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginInlineEnd(System.String)">
            <summary>
                style.scrollMarginInlineEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginInlineStart(System.String)">
            <summary>
                style.scrollMarginInlineStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginLeft(System.String)">
            <summary>
                style.scrollMarginLeft = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginRight(System.String)">
            <summary>
                style.scrollMarginRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginTop(System.String)">
            <summary>
                style.scrollMarginTop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollMarginTop(System.Double)">
            <summary>
                style.scrollMarginTop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPadding(System.String)">
            <summary>
                style.scrollPadding = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingBlock(System.String)">
            <summary>
                style.scrollPaddingBlock = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingBlockEnd(System.String)">
            <summary>
                style.scrollPaddingBlockEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingBlockStart(System.String)">
            <summary>
                style.scrollPaddingBlockStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingBottom(System.String)">
            <summary>
                style.scrollPaddingBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingInline(System.String)">
            <summary>
                style.scrollPaddingInline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingInlineEnd(System.String)">
            <summary>
                style.scrollPaddingInlineEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingInlineStart(System.String)">
            <summary>
                style.scrollPaddingInlineStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingLeft(System.String)">
            <summary>
                style.scrollPaddingLeft = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingRight(System.String)">
            <summary>
                style.scrollPaddingRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollPaddingTop(System.String)">
            <summary>
                style.scrollPaddingTop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollSnapAlign(System.String)">
            <summary>
                style.scrollSnapAlign = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollSnapStop(System.String)">
            <summary>
                style.scrollSnapStop = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollSnapType(System.String)">
            <summary>
                style.scrollSnapType = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollTimeline(System.String)">
            <summary>
                style.scrollTimeline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollTimelineAxis(System.String)">
            <summary>
                style.scrollTimelineAxis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollTimelineName(System.String)">
            <summary>
                style.scrollTimelineName = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollbarGutter(System.String)">
            <summary>
                style.scrollbarGutter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ScrollbarWidth(System.String)">
            <summary>
                style.scrollbarWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ShapeImageThreshold(System.String)">
            <summary>
                style.shapeImageThreshold = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ShapeMargin(System.String)">
            <summary>
                style.shapeMargin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ShapeOutside(System.String)">
            <summary>
                style.shapeOutside = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ShapeRendering(System.String)">
            <summary>
                style.shapeRendering = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Size(System.String)">
            <summary>
                style.size = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SizeAdjust(System.String)">
            <summary>
                style.sizeAdjust = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Speak(System.String)">
            <summary>
                style.speak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpeakAs(System.String)">
            <summary>
                style.speakAs = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StopColor(System.String)">
            <summary>
                style.stopColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StopOpacity(System.String)">
            <summary>
                style.stopOpacity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Stroke(System.String)">
            <summary>
                style.stroke = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeDasharray(System.String)">
            <summary>
                style.strokeDasharray = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeDashoffset(System.String)">
            <summary>
                style.strokeDashoffset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeLinecap(System.String)">
            <summary>
                style.strokeLinecap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeLinejoin(System.String)">
            <summary>
                style.strokeLinejoin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeMiterlimit(System.String)">
            <summary>
                style.strokeMiterlimit = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeOpacity(System.String)">
            <summary>
                style.strokeOpacity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.StrokeWidth(System.String)">
            <summary>
                style.strokeWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Suffix(System.String)">
            <summary>
                style.suffix = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Symbols(System.String)">
            <summary>
                style.symbols = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Syntax(System.String)">
            <summary>
                style.syntax = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.System(System.String)">
            <summary>
                style.system = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TabSize(System.String)">
            <summary>
                style.tabSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TableLayout(System.String)">
            <summary>
                style.tableLayout = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextAlign(System.String)">
            <summary>
                style.textAlign = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextAlignLast(System.String)">
            <summary>
                style.textAlignLast = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextAnchor(System.String)">
            <summary>
                style.textAnchor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextCombineHorizontal(System.String)">
            <summary>
                style.textCombineHorizontal = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextCombineUpright(System.String)">
            <summary>
                style.textCombineUpright = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextDecoration(System.String)">
            <summary>
                style.textDecoration = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextDecorationColor(System.String)">
            <summary>
                style.textDecorationColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextDecorationLine(System.String)">
            <summary>
                style.textDecorationLine = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextDecorationSkipInk(System.String)">
            <summary>
                style.textDecorationSkipInk = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextDecorationStyle(System.String)">
            <summary>
                style.textDecorationStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextDecorationThickness(System.String)">
            <summary>
                style.textDecorationThickness = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextEmphasis(System.String)">
            <summary>
                style.textEmphasis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextEmphasisColor(System.String)">
            <summary>
                style.textEmphasisColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextEmphasisPosition(System.String)">
            <summary>
                style.textEmphasisPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextEmphasisStyle(System.String)">
            <summary>
                style.textEmphasisStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextIndent(System.String)">
            <summary>
                style.textIndent = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextOrientation(System.String)">
            <summary>
                style.textOrientation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextOverflow(System.String)">
            <summary>
                style.textOverflow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextRendering(System.String)">
            <summary>
                style.textRendering = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextShadow(System.String)">
            <summary>
                style.textShadow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextSizeAdjust(System.String)">
            <summary>
                style.textSizeAdjust = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextTransform(System.String)">
            <summary>
                style.textTransform = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextUnderlineOffset(System.String)">
            <summary>
                style.textUnderlineOffset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextUnderlinePosition(System.String)">
            <summary>
                style.textUnderlinePosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextWrap(System.String)">
            <summary>
                style.textWrap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TimelineScope(System.String)">
            <summary>
                style.timelineScope = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Top(System.String)">
            <summary>
                style.top = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TouchAction(System.String)">
            <summary>
                style.touchAction = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transform(System.String)">
            <summary>
                style.transform = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransformBox(System.String)">
            <summary>
                style.transformBox = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransformOrigin(System.String)">
            <summary>
                style.transformOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransformStyle(System.String)">
            <summary>
                style.transformStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String)">
            <summary>
                style.transition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransitionBehavior(System.String)">
            <summary>
                style.transitionBehavior = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransitionDelay(System.String)">
            <summary>
                style.transitionDelay = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransitionDuration(System.String)">
            <summary>
                style.transitionDuration = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransitionProperty(System.String)">
            <summary>
                style.transitionProperty = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransitionTimingFunction(System.String)">
            <summary>
                style.transitionTimingFunction = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Translate(System.String)">
            <summary>
                style.translate = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.UnicodeBidi(System.String)">
            <summary>
                style.unicodeBidi = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.UnicodeRange(System.String)">
            <summary>
                style.unicodeRange = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.UserSelect(System.String)">
            <summary>
                style.userSelect = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.VectorEffect(System.String)">
            <summary>
                style.vectorEffect = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.VerticalAlign(System.String)">
            <summary>
                style.verticalAlign = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewTimeline(System.String)">
            <summary>
                style.viewTimeline = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewTimelineAxis(System.String)">
            <summary>
                style.viewTimelineAxis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewTimelineInset(System.String)">
            <summary>
                style.viewTimelineInset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewTimelineName(System.String)">
            <summary>
                style.viewTimelineName = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewTransitionName(System.String)">
            <summary>
                style.viewTransitionName = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Visibility(System.String)">
            <summary>
                style.visibility = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAlignContent(System.String)">
            <summary>
                style.WebkitAlignContent = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAlignItems(System.String)">
            <summary>
                style.WebkitAlignItems = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAlignSelf(System.String)">
            <summary>
                style.WebkitAlignSelf = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimation(System.String)">
            <summary>
                style.WebkitAnimation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationDelay(System.String)">
            <summary>
                style.WebkitAnimationDelay = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationDirection(System.String)">
            <summary>
                style.WebkitAnimationDirection = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationDuration(System.String)">
            <summary>
                style.WebkitAnimationDuration = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationFillMode(System.String)">
            <summary>
                style.WebkitAnimationFillMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationIterationCount(System.String)">
            <summary>
                style.WebkitAnimationIterationCount = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationName(System.String)">
            <summary>
                style.WebkitAnimationName = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationPlayState(System.String)">
            <summary>
                style.WebkitAnimationPlayState = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAnimationTimingFunction(System.String)">
            <summary>
                style.WebkitAnimationTimingFunction = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAppRegion(System.String)">
            <summary>
                style.WebkitAppRegion = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitAppearance(System.String)">
            <summary>
                style.WebkitAppearance = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBackfaceVisibility(System.String)">
            <summary>
                style.WebkitBackfaceVisibility = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBackdropFilter(System.String)">
            <summary>
                style.WebkitBackdropFilter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBackgroundClip(System.String)">
            <summary>
                style.WebkitBackgroundClip = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBackgroundOrigin(System.String)">
            <summary>
                style.WebkitBackgroundOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBackgroundSize(System.String)">
            <summary>
                style.WebkitBackgroundSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderAfter(System.String)">
            <summary>
                style.WebkitBorderAfter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderAfterColor(System.String)">
            <summary>
                style.WebkitBorderAfterColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderAfterStyle(System.String)">
            <summary>
                style.WebkitBorderAfterStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderAfterWidth(System.String)">
            <summary>
                style.WebkitBorderAfterWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderBefore(System.String)">
            <summary>
                style.WebkitBorderBefore = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderBeforeColor(System.String)">
            <summary>
                style.WebkitBorderBeforeColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderBeforeStyle(System.String)">
            <summary>
                style.WebkitBorderBeforeStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderBeforeWidth(System.String)">
            <summary>
                style.WebkitBorderBeforeWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderBottomLeftRadius(System.String)">
            <summary>
                style.WebkitBorderBottomLeftRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderBottomRightRadius(System.String)">
            <summary>
                style.WebkitBorderBottomRightRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderEnd(System.String)">
            <summary>
                style.WebkitBorderEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderEndColor(System.String)">
            <summary>
                style.WebkitBorderEndColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderEndStyle(System.String)">
            <summary>
                style.WebkitBorderEndStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderEndWidth(System.String)">
            <summary>
                style.WebkitBorderEndWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderHorizontalSpacing(System.String)">
            <summary>
                style.WebkitBorderHorizontalSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderImage(System.String)">
            <summary>
                style.WebkitBorderImage = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderRadius(System.String)">
            <summary>
                style.WebkitBorderRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderStart(System.String)">
            <summary>
                style.WebkitBorderStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderStartColor(System.String)">
            <summary>
                style.WebkitBorderStartColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderStartStyle(System.String)">
            <summary>
                style.WebkitBorderStartStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderStartWidth(System.String)">
            <summary>
                style.WebkitBorderStartWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderTopLeftRadius(System.String)">
            <summary>
                style.WebkitBorderTopLeftRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderTopRightRadius(System.String)">
            <summary>
                style.WebkitBorderTopRightRadius = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBorderVerticalSpacing(System.String)">
            <summary>
                style.WebkitBorderVerticalSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxAlign(System.String)">
            <summary>
                style.WebkitBoxAlign = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxDecorationBreak(System.String)">
            <summary>
                style.WebkitBoxDecorationBreak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxDirection(System.String)">
            <summary>
                style.WebkitBoxDirection = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxFlex(System.String)">
            <summary>
                style.WebkitBoxFlex = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxOrdinalGroup(System.String)">
            <summary>
                style.WebkitBoxOrdinalGroup = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxOrient(System.String)">
            <summary>
                style.WebkitBoxOrient = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxPack(System.String)">
            <summary>
                style.WebkitBoxPack = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxReflect(System.String)">
            <summary>
                style.WebkitBoxReflect = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxShadow(System.String)">
            <summary>
                style.WebkitBoxShadow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitBoxSizing(System.String)">
            <summary>
                style.WebkitBoxSizing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitClipPath(System.String)">
            <summary>
                style.WebkitClipPath = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnBreakAfter(System.String)">
            <summary>
                style.WebkitColumnBreakAfter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnBreakBefore(System.String)">
            <summary>
                style.WebkitColumnBreakBefore = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnBreakInside(System.String)">
            <summary>
                style.WebkitColumnBreakInside = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnCount(System.String)">
            <summary>
                style.WebkitColumnCount = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnGap(System.String)">
            <summary>
                style.WebkitColumnGap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnRule(System.String)">
            <summary>
                style.WebkitColumnRule = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnRuleColor(System.String)">
            <summary>
                style.WebkitColumnRuleColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnRuleStyle(System.String)">
            <summary>
                style.WebkitColumnRuleStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnRuleWidth(System.String)">
            <summary>
                style.WebkitColumnRuleWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnSpan(System.String)">
            <summary>
                style.WebkitColumnSpan = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumnWidth(System.String)">
            <summary>
                style.WebkitColumnWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitColumns(System.String)">
            <summary>
                style.WebkitColumns = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFilter(System.String)">
            <summary>
                style.WebkitFilter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlex(System.String)">
            <summary>
                style.WebkitFlex = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlexBasis(System.String)">
            <summary>
                style.WebkitFlexBasis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlexDirection(System.String)">
            <summary>
                style.WebkitFlexDirection = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlexFlow(System.String)">
            <summary>
                style.WebkitFlexFlow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlexGrow(System.String)">
            <summary>
                style.WebkitFlexGrow = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlexShrink(System.String)">
            <summary>
                style.WebkitFlexShrink = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFlexWrap(System.String)">
            <summary>
                style.WebkitFlexWrap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFontFeatureSettings(System.String)">
            <summary>
                style.WebkitFontFeatureSettings = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFontSmoothing(System.String)">
            <summary>
                style.WebkitFontSmoothing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitHyphenateCharacter(System.String)">
            <summary>
                style.WebkitHyphenateCharacter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitJustifyContent(System.String)">
            <summary>
                style.WebkitJustifyContent = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitLineBreak(System.String)">
            <summary>
                style.WebkitLineBreak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitLineClamp(System.String)">
            <summary>
                style.WebkitLineClamp = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitLocale(System.String)">
            <summary>
                style.WebkitLocale = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitLogicalHeight(System.String)">
            <summary>
                style.WebkitLogicalHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitLogicalWidth(System.String)">
            <summary>
                style.WebkitLogicalWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMarginAfter(System.String)">
            <summary>
                style.WebkitMarginAfter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMarginBefore(System.String)">
            <summary>
                style.WebkitMarginBefore = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMarginEnd(System.String)">
            <summary>
                style.WebkitMarginEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMarginStart(System.String)">
            <summary>
                style.WebkitMarginStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMask(System.String)">
            <summary>
                style.WebkitMask = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskBoxImage(System.String)">
            <summary>
                style.WebkitMaskBoxImage = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskBoxImageOutset(System.String)">
            <summary>
                style.WebkitMaskBoxImageOutset = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskBoxImageRepeat(System.String)">
            <summary>
                style.WebkitMaskBoxImageRepeat = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskBoxImageSlice(System.String)">
            <summary>
                style.WebkitMaskBoxImageSlice = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskBoxImageSource(System.String)">
            <summary>
                style.WebkitMaskBoxImageSource = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskBoxImageWidth(System.String)">
            <summary>
                style.WebkitMaskBoxImageWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskClip(System.String)">
            <summary>
                style.WebkitMaskClip = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskComposite(System.String)">
            <summary>
                style.WebkitMaskComposite = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskImage(System.String)">
            <summary>
                style.WebkitMaskImage = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskOrigin(System.String)">
            <summary>
                style.WebkitMaskOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskPosition(System.String)">
            <summary>
                style.WebkitMaskPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskPositionX(System.String)">
            <summary>
                style.WebkitMaskPositionX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskPositionY(System.String)">
            <summary>
                style.WebkitMaskPositionY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskRepeat(System.String)">
            <summary>
                style.WebkitMaskRepeat = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskRepeatX(System.String)">
            <summary>
                style.WebkitMaskRepeatX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskRepeatY(System.String)">
            <summary>
                style.WebkitMaskRepeatY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaskSize(System.String)">
            <summary>
                style.WebkitMaskSize = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaxLogicalHeight(System.String)">
            <summary>
                style.WebkitMaxLogicalHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMaxLogicalWidth(System.String)">
            <summary>
                style.WebkitMaxLogicalWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMinLogicalHeight(System.String)">
            <summary>
                style.WebkitMinLogicalHeight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitMinLogicalWidth(System.String)">
            <summary>
                style.WebkitMinLogicalWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitOpacity(System.String)">
            <summary>
                style.WebkitOpacity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitOrder(System.String)">
            <summary>
                style.WebkitOrder = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPaddingAfter(System.String)">
            <summary>
                style.WebkitPaddingAfter = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPaddingBefore(System.String)">
            <summary>
                style.WebkitPaddingBefore = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPaddingEnd(System.String)">
            <summary>
                style.WebkitPaddingEnd = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPaddingStart(System.String)">
            <summary>
                style.WebkitPaddingStart = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPerspective(System.String)">
            <summary>
                style.WebkitPerspective = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPerspectiveOrigin(System.String)">
            <summary>
                style.WebkitPerspectiveOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPerspectiveOriginX(System.String)">
            <summary>
                style.WebkitPerspectiveOriginX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPerspectiveOriginY(System.String)">
            <summary>
                style.WebkitPerspectiveOriginY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitPrintColorAdjust(System.String)">
            <summary>
                style.WebkitPrintColorAdjust = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitRtlOrdering(System.String)">
            <summary>
                style.WebkitRtlOrdering = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitRubyPosition(System.String)">
            <summary>
                style.WebkitRubyPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitShapeImageThreshold(System.String)">
            <summary>
                style.WebkitShapeImageThreshold = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitShapeMargin(System.String)">
            <summary>
                style.WebkitShapeMargin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitShapeOutside(System.String)">
            <summary>
                style.WebkitShapeOutside = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTapHighlightColor(System.String)">
            <summary>
                style.WebkitTapHighlightColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextCombine(System.String)">
            <summary>
                style.WebkitTextCombine = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextDecorationsInEffect(System.String)">
            <summary>
                style.WebkitTextDecorationsInEffect = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextEmphasis(System.String)">
            <summary>
                style.WebkitTextEmphasis = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextEmphasisColor(System.String)">
            <summary>
                style.WebkitTextEmphasisColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextEmphasisPosition(System.String)">
            <summary>
                style.WebkitTextEmphasisPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextEmphasisStyle(System.String)">
            <summary>
                style.WebkitTextEmphasisStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextFillColor(System.String)">
            <summary>
                style.WebkitTextFillColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextOrientation(System.String)">
            <summary>
                style.WebkitTextOrientation = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextSecurity(System.String)">
            <summary>
                style.WebkitTextSecurity = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextSizeAdjust(System.String)">
            <summary>
                style.WebkitTextSizeAdjust = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextStroke(System.String)">
            <summary>
                style.WebkitTextStroke = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextStrokeColor(System.String)">
            <summary>
                style.WebkitTextStrokeColor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTextStrokeWidth(System.String)">
            <summary>
                style.WebkitTextStrokeWidth = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransform(System.String)">
            <summary>
                style.WebkitTransform = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransformOrigin(System.String)">
            <summary>
                style.WebkitTransformOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransformOriginX(System.String)">
            <summary>
                style.WebkitTransformOriginX = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransformOriginY(System.String)">
            <summary>
                style.WebkitTransformOriginY = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransformOriginZ(System.String)">
            <summary>
                style.WebkitTransformOriginZ = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransformStyle(System.String)">
            <summary>
                style.WebkitTransformStyle = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransition(System.String)">
            <summary>
                style.WebkitTransition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransitionDelay(System.String)">
            <summary>
                style.WebkitTransitionDelay = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransitionDuration(System.String)">
            <summary>
                style.WebkitTransitionDuration = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransitionProperty(System.String)">
            <summary>
                style.WebkitTransitionProperty = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitTransitionTimingFunction(System.String)">
            <summary>
                style.WebkitTransitionTimingFunction = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitUserDrag(System.String)">
            <summary>
                style.WebkitUserDrag = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitUserModify(System.String)">
            <summary>
                style.WebkitUserModify = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitUserSelect(System.String)">
            <summary>
                style.WebkitUserSelect = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitWritingMode(System.String)">
            <summary>
                style.WebkitWritingMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhiteSpace(System.String)">
            <summary>
                style.whiteSpace = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhiteSpaceCollapse(System.String)">
            <summary>
                style.whiteSpaceCollapse = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Widows(System.String)">
            <summary>
                style.widows = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Width(System.String)">
            <summary>
                style.width = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WillChange(System.String)">
            <summary>
                style.willChange = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WordBreak(System.String)">
            <summary>
                style.wordBreak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WordSpacing(System.String)">
            <summary>
                style.wordSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WordWrap(System.String)">
            <summary>
                style.wordWrap = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WritingMode(System.String)">
            <summary>
                style.writingMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.X(System.String)">
            <summary>
                style.x = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Y(System.String)">
            <summary>
                style.y = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ZIndex(System.String)">
            <summary>
                style.zIndex = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Zoom(System.String)">
            <summary>
                style.zoom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MozOsxFontSmoothing(System.String)">
            <summary>
                style.mozOsxFontSmoothing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BoxDecorationBreak(System.String)">
            <summary>
                style.boxDecorationBreak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CssFloat(System.String)">
            <summary>
                style.cssFloat = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CssText(System.String)">
            <summary>
                style.cssText = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontLanguageOverride(System.String)">
            <summary>
                style.fontLanguageOverride = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontSizeAdjust(System.String)">
            <summary>
                style.fontSizeAdjust = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.GridAutoPosition(System.String)">
            <summary>
                style.gridAutoPosition = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Icon(System.String)">
            <summary>
                style.icon = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ImageResolution(System.String)">
            <summary>
                style.imageResolution = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ImeMode(System.String)">
            <summary>
                style.imeMode = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Marks(System.String)">
            <summary>
                style.marks = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.NavDown(System.String)">
            <summary>
                style.navDown = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.NavIndex(System.String)">
            <summary>
                style.navIndex = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.NavLeft(System.String)">
            <summary>
                style.navLeft = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.NavRight(System.String)">
            <summary>
                style.navRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.NavUp(System.String)">
            <summary>
                style.navUp = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OverflowClipBox(System.String)">
            <summary>
                style.overflowClipBox = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewBox(System.String)">
            <summary>
                svg.viewBox = <paramref name="viewBox" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                svg.viewBox = '<paramref name="minX" /> <paramref name="minY" /> <paramref name="width" /> <paramref name="height" />'
            </summary>
        </member>
        <member name="T:ReactWithDotNet.SkipRenderAttribute">
            <summary>
                Skips call c# render method of component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Client.Height">
            <summary>
                Client size information will be available after the first request.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Client.Width">
            <summary>
                Client size information will be available after the first request.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Client.WidthHasMatch(System.Func{ReactWithDotNet.StyleModifier[],ReactWithDotNet.StyleModifier})">
            <summary>
             Sample usage:
                <code>
                
                 if (Client.WidthHasMatch(SM))
                 {
                     // 
                 }
                
                </code>
            </summary>
        </member>
        <member name="T:ReactWithDotNet.article">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(System.String)">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.op_Implicit(System.String)~ReactWithDotNet.article">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(ReactWithDotNet.Style)">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.type">
            <summary>
                Specifies the type of button. button, reset, submit
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.value">
            <summary>
                Specifies an initial value for the button
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.autofocus">
            <summary>
                Specifies that the button should have input focus when the page loads. Only one element in a document can have this attribute.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.disabled">
            <summary>
                Specifies that the button should be disabled. A disabled button cannot be clicked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.form">
            <summary>
                Specifies the form that the button is associated with.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.formaction">
            <summary>
                Specifies the URL of the form action when the button is clicked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.formenctype">
            <summary>
                Specifies the form encoding method (e.g., application/x-www-form-urlencoded, multipart/form-data) when the button is clicked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.formmethod">
            <summary>
                Specifies the form submission method (e.g., GET, POST) when the button is clicked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.formnovalidate">
            <summary>
                Specifies that the form should not be validated before submission when the button is clicked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.button.name">
            <summary>
                Specifies a name for the button. The name attribute is used to reference form-data after the form has been submitted, or to reference the element in JavaScript.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Type(System.String)">
            <summary>
                type = <paramref name="value"/>
            <br/>
                Specifies the type of button. button, reset, submit
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Value(System.String)">
            <summary>
                value = <paramref name="value"/>
            <br/>
                Specifies an initial value for the button
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Autofocus(System.String)">
            <summary>
                autofocus = <paramref name="value"/>
            <br/>
                Specifies that the button should have input focus when the page loads. Only one element in a document can have this attribute.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Disabled(System.String)">
            <summary>
                disabled = <paramref name="value"/>
            <br/>
                Specifies that the button should be disabled. A disabled button cannot be clicked.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Form(System.String)">
            <summary>
                form = <paramref name="value"/>
            <br/>
                Specifies the form that the button is associated with.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Formaction(System.String)">
            <summary>
                formaction = <paramref name="value"/>
            <br/>
                Specifies the URL of the form action when the button is clicked.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Formenctype(System.String)">
            <summary>
                formenctype = <paramref name="value"/>
            <br/>
                Specifies the form encoding method (e.g., application/x-www-form-urlencoded, multipart/form-data) when the button is clicked.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Formmethod(System.String)">
            <summary>
                formmethod = <paramref name="value"/>
            <br/>
                Specifies the form submission method (e.g., GET, POST) when the button is clicked.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Formnovalidate(System.String)">
            <summary>
                formnovalidate = <paramref name="value"/>
            <br/>
                Specifies that the form should not be validated before submission when the button is clicked.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.button.Name(System.String)">
            <summary>
                name = <paramref name="value"/>
            <br/>
                Specifies a name for the button. The name attribute is used to reference form-data after the form has been submitted, or to reference the element in JavaScript.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.p">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(System.String)">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.op_Implicit(System.String)~ReactWithDotNet.p">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(ReactWithDotNet.Style)">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="P:ReactWithDotNet.time.datetime">
            <summary>
                Represent a machine-readable format of the 'time' element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.time.Datetime(System.String)">
            <summary>
                datetime = <paramref name="value"/>
            <br/>
                Represent a machine-readable format of the 'time' element
            </summary>
        </member>
        <member name="T:ReactWithDotNet.dl">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(System.String)">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.op_Implicit(System.String)~ReactWithDotNet.dl">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(ReactWithDotNet.Style)">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dl.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Defines a description list.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.dt">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(System.String)">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.op_Implicit(System.String)~ReactWithDotNet.dt">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(ReactWithDotNet.Style)">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dt.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Defines a term/name in a description list.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.dd">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(System.String)">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.op_Implicit(System.String)~ReactWithDotNet.dd">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(ReactWithDotNet.Style)">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.dd.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Describe a term/name in a description list.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.kbd">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(System.String)">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.op_Implicit(System.String)~ReactWithDotNet.kbd">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(ReactWithDotNet.Style)">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.kbd.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                tag is used to define keyboard input. The content inside is displayed in the browser's default monospace font.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.pre">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(System.String)">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.op_Implicit(System.String)~ReactWithDotNet.pre">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(ReactWithDotNet.Style)">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.code">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(System.String)">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.op_Implicit(System.String)~ReactWithDotNet.code">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(ReactWithDotNet.Style)">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ol">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(System.String)">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.op_Implicit(System.String)~ReactWithDotNet.ol">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(ReactWithDotNet.Style)">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ul">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(System.String)">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.op_Implicit(System.String)~ReactWithDotNet.ul">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(ReactWithDotNet.Style)">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="T:ReactWithDotNet.li">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(System.String)">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.op_Implicit(System.String)~ReactWithDotNet.li">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(ReactWithDotNet.Style)">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                List item
            </summary>
        </member>
        <member name="T:ReactWithDotNet.span">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(System.String)">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.op_Implicit(System.String)~ReactWithDotNet.span">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(ReactWithDotNet.Style)">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.sup">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(System.String)">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.op_Implicit(System.String)~ReactWithDotNet.sup">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(ReactWithDotNet.Style)">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.sub">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(System.String)">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.op_Implicit(System.String)~ReactWithDotNet.sub">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(ReactWithDotNet.Style)">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ins">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(System.String)">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.op_Implicit(System.String)~ReactWithDotNet.ins">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(ReactWithDotNet.Style)">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.del">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(System.String)">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.op_Implicit(System.String)~ReactWithDotNet.del">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(ReactWithDotNet.Style)">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.small">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(System.String)">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.op_Implicit(System.String)~ReactWithDotNet.small">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(ReactWithDotNet.Style)">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.mark">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(System.String)">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.op_Implicit(System.String)~ReactWithDotNet.mark">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(ReactWithDotNet.Style)">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.em">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(System.String)">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.op_Implicit(System.String)~ReactWithDotNet.em">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(ReactWithDotNet.Style)">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.b">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(System.String)">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.op_Implicit(System.String)~ReactWithDotNet.b">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(ReactWithDotNet.Style)">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.i">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(System.String)">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.op_Implicit(System.String)~ReactWithDotNet.i">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(ReactWithDotNet.Style)">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.u">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(System.String)">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.op_Implicit(System.String)~ReactWithDotNet.u">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(ReactWithDotNet.Style)">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.strong">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(System.String)">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.op_Implicit(System.String)~ReactWithDotNet.strong">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(ReactWithDotNet.Style)">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Important text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.section">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(System.String)">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(ReactWithDotNet.Style)">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(ReactWithDotNet.StyleModifier[])">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(System.Collections.Generic.List{ReactWithDotNet.StyleModifier})">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(System.Collections.Generic.List{ReactWithDotNet.Modifier})">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="P:ReactWithDotNet.th.scope">
            <summary>
                specifies whether a header cell is a header for a column, row, or group of columns or rows.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.th.Scope(System.String)">
            <summary>
                scope = <paramref name="value"/>
            <br/>
                specifies whether a header cell is a header for a column, row, or group of columns or rows.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.cx">
            <summary>
                The x-coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.cy">
            <summary>
                The y-coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.rx">
            <summary>
                The radius of the ellipse along the x-axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.ry">
            <summary>
                The radius of the ellipse along the y-axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.fill">
            <summary>
                The fill color of the ellipse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.stroke">
            <summary>
                The stroke color of the ellipse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ellipse.strokeWidth">
            <summary>
                The width of the stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.Cx(System.String)">
            <summary>
                cx = <paramref name="value"/>
            <br/>
                The x-coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.Cy(System.String)">
            <summary>
                cy = <paramref name="value"/>
            <br/>
                The y-coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.Rx(System.String)">
            <summary>
                rx = <paramref name="value"/>
            <br/>
                The radius of the ellipse along the x-axis.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.Ry(System.String)">
            <summary>
                ry = <paramref name="value"/>
            <br/>
                The radius of the ellipse along the y-axis.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.Fill(System.String)">
            <summary>
                fill = <paramref name="value"/>
            <br/>
                The fill color of the ellipse.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                The stroke color of the ellipse.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ellipse.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                The width of the stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.x1">
            <summary>
                The x-coordinate of the start point of the line.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.y1">
            <summary>
                The y-coordinate of the start point of the line.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.x2">
            <summary>
                The x-coordinate of the end point of the line.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.y2">
            <summary>
                The y-coordinate of the end point of the line.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.stroke">
            <summary>
                The stroke (outline) color of the line.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.strokeWidth">
            <summary>
                The width of the line's outline.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.strokeDasharray">
            <summary>
                Pattern of dashes and gaps used in the line's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.strokeLinecap">
            <summary>
                The style of the line's endpoints.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.strokeLinejoin">
            <summary>
                The style of the line's corners.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.line.strokeOpacity">
            <summary>
                The opacity (transparency) of the line's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.X1(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                x1 = <paramref name="value"/>
            <br/>
                The x-coordinate of the start point of the line.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.Y1(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                y1 = <paramref name="value"/>
            <br/>
                The y-coordinate of the start point of the line.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.X2(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                x2 = <paramref name="value"/>
            <br/>
                The x-coordinate of the end point of the line.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.Y2(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                y2 = <paramref name="value"/>
            <br/>
                The y-coordinate of the end point of the line.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                The stroke (outline) color of the line.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                The width of the line's outline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.StrokeDasharray(System.String)">
            <summary>
                strokeDasharray = <paramref name="value"/>
            <br/>
                Pattern of dashes and gaps used in the line's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.StrokeLinecap(System.String)">
            <summary>
                strokeLinecap = <paramref name="value"/>
            <br/>
                The style of the line's endpoints.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.StrokeLinejoin(System.String)">
            <summary>
                strokeLinejoin = <paramref name="value"/>
            <br/>
                The style of the line's corners.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.line.StrokeOpacity(System.String)">
            <summary>
                strokeOpacity = <paramref name="value"/>
            <br/>
                The opacity (transparency) of the line's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polyline.points">
            <summary>
                A list of points defining the vertices of the polyline.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polyline.fill">
            <summary>
                The fill color of the polyline.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polyline.stroke">
            <summary>
                The stroke (outline) color of the polyline.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polyline.strokeWidth">
            <summary>
                The width of the polyline's outline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polyline.Points(System.String)">
            <summary>
                points = <paramref name="value"/>
            <br/>
                A list of points defining the vertices of the polyline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polyline.Fill(System.String)">
            <summary>
                fill = <paramref name="value"/>
            <br/>
                The fill color of the polyline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polyline.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                The stroke (outline) color of the polyline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polyline.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                The width of the polyline's outline.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.circle.cx">
            <summary>
                The x-coordinate of the center of the circle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.circle.cy">
            <summary>
                The y-coordinate of the center of the circle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.circle.r">
            <summary>
                The radius of the circle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.circle.fill">
            <summary>
                The fill color of the circle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.circle.stroke">
            <summary>
                The stroke color of the circle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.circle.strokeWidth">
            <summary>
                The width of the stroke of the circle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.circle.Cx(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                cx = <paramref name="value"/>
            <br/>
                The x-coordinate of the center of the circle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.circle.Cy(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                cy = <paramref name="value"/>
            <br/>
                The y-coordinate of the center of the circle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.circle.R(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                r = <paramref name="value"/>
            <br/>
                The radius of the circle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.circle.Fill(System.String)">
            <summary>
                fill = <paramref name="value"/>
            <br/>
                The fill color of the circle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.circle.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                The stroke color of the circle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.circle.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                The width of the stroke of the circle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.points">
            <summary>
                Specifies the coordinates of the polygon's vertices, in (x, y) pairs, separated by commas.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.fill">
            <summary>
                Specifies the fill color of the polygon.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.stroke">
            <summary>
                Specifies the stroke color of the polygon.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.strokeWidth">
            <summary>
                Specifies the width of the polygon's stroke, in pixels.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.strokeLinecap">
            <summary>
                Specifies the type of line cap used for the polygon's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.strokeLinejoin">
            <summary>
                Specifies the type of line join used for the polygon's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.polygon.fillRule">
            <summary>
                Specifies how the polygon is filled.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.Points(System.String)">
            <summary>
                points = <paramref name="value"/>
            <br/>
                Specifies the coordinates of the polygon's vertices, in (x, y) pairs, separated by commas.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.Fill(System.String)">
            <summary>
                fill = <paramref name="value"/>
            <br/>
                Specifies the fill color of the polygon.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                Specifies the stroke color of the polygon.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                Specifies the width of the polygon's stroke, in pixels.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.StrokeLinecap(System.String)">
            <summary>
                strokeLinecap = <paramref name="value"/>
            <br/>
                Specifies the type of line cap used for the polygon's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.StrokeLinejoin(System.String)">
            <summary>
                strokeLinejoin = <paramref name="value"/>
            <br/>
                Specifies the type of line join used for the polygon's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.polygon.FillRule(System.String)">
            <summary>
                fillRule = <paramref name="value"/>
            <br/>
                Specifies how the polygon is filled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.x">
            <summary>
                The x-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.y">
            <summary>
                The y-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.width">
            <summary>
                The width of the rectangle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.height">
            <summary>
                The height of the rectangle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.rx">
            <summary>
                The border radius of the rectangle on the horizontal axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.ry">
            <summary>
                The border radius of the rectangle on the vertical axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.fill">
            <summary>
                The fill color of the rectangle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.stroke">
            <summary>
                The stroke color of the rectangle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.strokeWidth">
            <summary>
                The width of the rectangle's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.strokeLinecap">
            <summary>
                The linecap style of the rectangle's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.strokeLinejoin">
            <summary>
                The linejoin style of the rectangle's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.X(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                x = <paramref name="value"/>
            <br/>
                The x-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Y(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                y = <paramref name="value"/>
            <br/>
                The y-coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Width(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                width = <paramref name="value"/>
            <br/>
                The width of the rectangle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Height(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                height = <paramref name="value"/>
            <br/>
                The height of the rectangle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Rx(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                rx = <paramref name="value"/>
            <br/>
                The border radius of the rectangle on the horizontal axis.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Ry(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                ry = <paramref name="value"/>
            <br/>
                The border radius of the rectangle on the vertical axis.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Fill(System.String)">
            <summary>
                fill = <paramref name="value"/>
            <br/>
                The fill color of the rectangle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                The stroke color of the rectangle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                The width of the rectangle's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.StrokeLinecap(System.String)">
            <summary>
                strokeLinecap = <paramref name="value"/>
            <br/>
                The linecap style of the rectangle's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.rect.StrokeLinejoin(System.String)">
            <summary>
                strokeLinejoin = <paramref name="value"/>
            <br/>
                The linejoin style of the rectangle's stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.markerHeight">
            <summary>
                Specifies the height of the marker viewport.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.markerUnits">
            <summary>
                Specifies the coordinate system for the marker width and height. Possible values are 'strokeWidth' or 'userSpaceOnUse'.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.markerWidth">
            <summary>
                Specifies the width of the marker viewport.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.orient">
            <summary>
                Defines the rotation angle for the marker, in degrees. Accepts 'auto', 'auto-start-reverse', or a specific angle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.preserveAspectRatio">
            <summary>
                Indicates how the marker should scale its dimensions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.refX">
            <summary>
                Defines the x-coordinate in the marker’s coordinate system.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.refY">
            <summary>
                Defines the y-coordinate in the marker’s coordinate system.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.marker.viewBox">
            <summary>
                Specifies the position and dimension of the marker’s viewport.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.MarkerHeight(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                markerHeight = <paramref name="value"/>
            <br/>
                Specifies the height of the marker viewport.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.MarkerUnits(System.String)">
            <summary>
                markerUnits = <paramref name="value"/>
            <br/>
                Specifies the coordinate system for the marker width and height. Possible values are 'strokeWidth' or 'userSpaceOnUse'.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.MarkerWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                markerWidth = <paramref name="value"/>
            <br/>
                Specifies the width of the marker viewport.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.Orient(System.String)">
            <summary>
                orient = <paramref name="value"/>
            <br/>
                Defines the rotation angle for the marker, in degrees. Accepts 'auto', 'auto-start-reverse', or a specific angle.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.PreserveAspectRatio(System.String)">
            <summary>
                preserveAspectRatio = <paramref name="value"/>
            <br/>
                Indicates how the marker should scale its dimensions.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.RefX(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                refX = <paramref name="value"/>
            <br/>
                Defines the x-coordinate in the marker’s coordinate system.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.RefY(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                refY = <paramref name="value"/>
            <br/>
                Defines the y-coordinate in the marker’s coordinate system.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.marker.ViewBox(System.String)">
            <summary>
                viewBox = <paramref name="value"/>
            <br/>
                Specifies the position and dimension of the marker’s viewport.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.cx">
            <summary>
                The x-coordinate of the center of the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.cy">
            <summary>
                The y-coordinate of the center of the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.fx">
            <summary>
                The x-coordinate of the focal point of the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.fy">
            <summary>
                The y-coordinate of the focal point of the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.r">
            <summary>
                The radius of the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.spreadMethod">
            <summary>
                The method used to spread the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.gradientUnits">
            <summary>
                The units used to specify the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.radialGradient.gradientTransform">
            <summary>
                A transform to apply to the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.Cx(System.String)">
            <summary>
                cx = <paramref name="value"/>
            <br/>
                The x-coordinate of the center of the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.Cy(System.String)">
            <summary>
                cy = <paramref name="value"/>
            <br/>
                The y-coordinate of the center of the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.Fx(System.String)">
            <summary>
                fx = <paramref name="value"/>
            <br/>
                The x-coordinate of the focal point of the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.Fy(System.String)">
            <summary>
                fy = <paramref name="value"/>
            <br/>
                The y-coordinate of the focal point of the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.R(System.String)">
            <summary>
                r = <paramref name="value"/>
            <br/>
                The radius of the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.SpreadMethod(System.String)">
            <summary>
                spreadMethod = <paramref name="value"/>
            <br/>
                The method used to spread the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.GradientUnits(System.String)">
            <summary>
                gradientUnits = <paramref name="value"/>
            <br/>
                The units used to specify the gradient.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.radialGradient.GradientTransform(System.String)">
            <summary>
                gradientTransform = <paramref name="value"/>
            <br/>
                A transform to apply to the gradient.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.clipPath.id">
            <summary>
                Unique identifier for referencing this clipPath
            </summary>
        </member>
        <member name="P:ReactWithDotNet.clipPath.clipPathUnits">
            <summary>
                Coordinate system for the contents
            </summary>
        </member>
        <member name="P:ReactWithDotNet.clipPath.transform">
            <summary>
                Apply transformations to the clipping path
            </summary>
        </member>
        <member name="P:ReactWithDotNet.clipPath.clipRule">
            <summary>
                Specifies the fill rule for the clipping path.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.clipPath.clipBox">
            <summary>
                Specifies the reference box for the clipping path.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.clipPath.Id(System.String)">
            <summary>
                id = <paramref name="value"/>
            <br/>
                Unique identifier for referencing this clipPath
            </summary>
        </member>
        <member name="M:ReactWithDotNet.clipPath.ClipPathUnits(System.String)">
            <summary>
                clipPathUnits = <paramref name="value"/>
            <br/>
                Coordinate system for the contents
            </summary>
        </member>
        <member name="M:ReactWithDotNet.clipPath.Transform(System.String)">
            <summary>
                transform = <paramref name="value"/>
            <br/>
                Apply transformations to the clipping path
            </summary>
        </member>
        <member name="M:ReactWithDotNet.clipPath.ClipRule(System.String)">
            <summary>
                clipRule = <paramref name="value"/>
            <br/>
                Specifies the fill rule for the clipping path.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.clipPath.ClipBox(System.String)">
            <summary>
                clipBox = <paramref name="value"/>
            <br/>
                Specifies the reference box for the clipping path.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.path.d">
            <summary>
                Path data
            </summary>
        </member>
        <member name="P:ReactWithDotNet.path.fill">
            <summary>
                Fill color
            </summary>
        </member>
        <member name="P:ReactWithDotNet.path.stroke">
            <summary>
                Stroke color
            </summary>
        </member>
        <member name="P:ReactWithDotNet.path.strokeWidth">
            <summary>
                Stroke width
            </summary>
        </member>
        <member name="P:ReactWithDotNet.path.transform">
            <summary>
                Apply transformations to the path
            </summary>
        </member>
        <member name="M:ReactWithDotNet.path.D(System.String)">
            <summary>
                d = <paramref name="value"/>
            <br/>
                Path data
            </summary>
        </member>
        <member name="M:ReactWithDotNet.path.Fill(System.String)">
            <summary>
                fill = <paramref name="value"/>
            <br/>
                Fill color
            </summary>
        </member>
        <member name="M:ReactWithDotNet.path.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                Stroke color
            </summary>
        </member>
        <member name="M:ReactWithDotNet.path.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                Stroke width
            </summary>
        </member>
        <member name="M:ReactWithDotNet.path.Transform(System.String)">
            <summary>
                transform = <paramref name="value"/>
            <br/>
                Apply transformations to the path
            </summary>
        </member>
        <member name="P:ReactWithDotNet.mask.height">
            <summary>
                This attribute defines the height of the masking area. Value type: length ; Default value: 120%; Animatable: yes
            </summary>
        </member>
        <member name="P:ReactWithDotNet.mask.maskContentUnits">
            <summary>
                This attribute defines the coordinate system for the contents of the mask. Value type: userSpaceOnUse|objectBoundingBox ; Default value: userSpaceOnUse; Animatable: yes
            </summary>
        </member>
        <member name="P:ReactWithDotNet.mask.maskUnits">
            <summary>
                This attribute defines the coordinate system for attributes x, y, width and height on the mask. Value type: userSpaceOnUse|objectBoundingBox ; Default value: objectBoundingBox; Animatable: yes
            </summary>
        </member>
        <member name="P:ReactWithDotNet.mask.x">
            <summary>
                This attribute defines the x-axis coordinate of the top-left corner of the masking area. Value type: 'coordinate' ; Default value: -10%; Animatable: yes
            </summary>
        </member>
        <member name="P:ReactWithDotNet.mask.y">
            <summary>
                This attribute defines the y-axis coordinate of the top-left corner of the masking area. Value type: 'coordinate' ; Default value: -10%; Animatable: yes
            </summary>
        </member>
        <member name="P:ReactWithDotNet.mask.width">
            <summary>
                This attribute defines the width of the masking area. Value type: 'length' ; Default value: 120%; Animatable: yes
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mask.Height(System.String)">
            <summary>
                height = <paramref name="value"/>
            <br/>
                This attribute defines the height of the masking area. Value type: length ; Default value: 120%; Animatable: yes
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mask.MaskContentUnits(System.String)">
            <summary>
                maskContentUnits = <paramref name="value"/>
            <br/>
                This attribute defines the coordinate system for the contents of the mask. Value type: userSpaceOnUse|objectBoundingBox ; Default value: userSpaceOnUse; Animatable: yes
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mask.MaskUnits(System.String)">
            <summary>
                maskUnits = <paramref name="value"/>
            <br/>
                This attribute defines the coordinate system for attributes x, y, width and height on the mask. Value type: userSpaceOnUse|objectBoundingBox ; Default value: objectBoundingBox; Animatable: yes
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mask.X(System.String)">
            <summary>
                x = <paramref name="value"/>
            <br/>
                This attribute defines the x-axis coordinate of the top-left corner of the masking area. Value type: 'coordinate' ; Default value: -10%; Animatable: yes
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mask.Y(System.String)">
            <summary>
                y = <paramref name="value"/>
            <br/>
                This attribute defines the y-axis coordinate of the top-left corner of the masking area. Value type: 'coordinate' ; Default value: -10%; Animatable: yes
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mask.Width(System.String)">
            <summary>
                width = <paramref name="value"/>
            <br/>
                This attribute defines the width of the masking area. Value type: 'length' ; Default value: 120%; Animatable: yes
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.charset">
            <summary>
                Specifies the character encoding of the document.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.httpEquiv">
            <summary>
                Specifies the name of the HTTP header that the meta tag should be equivalent to.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.name">
            <summary>
                Specifies the name of the metadata property.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.content">
            <summary>
                Specifies the value of the metadata property.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.scheme">
            <summary>
                Specifies the URL scheme for the content attribute of the meta tag.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.itemprop">
            <summary>
                Specifies the Microdata item property that the meta tag represents.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.property">
            <summary>
                Specifies the schema.org property that the meta tag represents.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.meta.src">
            <summary>
                Specifies the URL for a resource associated with the meta tag.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Charset(System.String)">
            <summary>
                charset = <paramref name="value"/>
            <br/>
                Specifies the character encoding of the document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.HttpEquiv(System.String)">
            <summary>
                httpEquiv = <paramref name="value"/>
            <br/>
                Specifies the name of the HTTP header that the meta tag should be equivalent to.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Name(System.String)">
            <summary>
                name = <paramref name="value"/>
            <br/>
                Specifies the name of the metadata property.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Content(System.String)">
            <summary>
                content = <paramref name="value"/>
            <br/>
                Specifies the value of the metadata property.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Scheme(System.String)">
            <summary>
                scheme = <paramref name="value"/>
            <br/>
                Specifies the URL scheme for the content attribute of the meta tag.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Itemprop(System.String)">
            <summary>
                itemprop = <paramref name="value"/>
            <br/>
                Specifies the Microdata item property that the meta tag represents.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Property(System.String)">
            <summary>
                property = <paramref name="value"/>
            <br/>
                Specifies the schema.org property that the meta tag represents.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.meta.Src(System.String)">
            <summary>
                src = <paramref name="value"/>
            <br/>
                Specifies the URL for a resource associated with the meta tag.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.body.background">
            <summary>
                Specifies the URL of a background image to be displayed behind the document's content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.body.bgcolor">
            <summary>
                Specifies the background color of the document's body.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.body.link">
            <summary>
                Specifies the color of unvisited links in the document's body.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.body.Background(System.String)">
            <summary>
                background = <paramref name="value"/>
            <br/>
                Specifies the URL of a background image to be displayed behind the document's content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.body.Bgcolor(System.String)">
            <summary>
                bgcolor = <paramref name="value"/>
            <br/>
                Specifies the background color of the document's body.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.body.Link(System.String)">
            <summary>
                link = <paramref name="value"/>
            <br/>
                Specifies the color of unvisited links in the document's body.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.async">
            <summary>
                Specifies that the script should be executed asynchronously. This means that the browser will not wait for the script to finish executing before continuing to parse the rest of the HTML.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.defer">
            <summary>
                Specifies that the script should be executed after the browser has finished parsing the rest of the HTML. This is similar to async, but it ensures that scripts are executed in the order they are specified in the HTML.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.integrity">
            <summary>
                Specifies a subresource integrity (SRI) hash for the script. This helps to protect against man-in-the-middle attacks.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.language">
            <summary>
                Specifies the scripting language of the script. This is deprecated, but is still supported by most browsers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.nomodule">
            <summary>
                Specifies that the script should be ignored if the browser does not support modules.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.src">
            <summary>
                Specifies the URL of an external script file.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.script.type">
            <summary>
                Specifies the type of the script. The most common value is application/javascript.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Async(System.String)">
            <summary>
                async = <paramref name="value"/>
            <br/>
                Specifies that the script should be executed asynchronously. This means that the browser will not wait for the script to finish executing before continuing to parse the rest of the HTML.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Defer(System.String)">
            <summary>
                defer = <paramref name="value"/>
            <br/>
                Specifies that the script should be executed after the browser has finished parsing the rest of the HTML. This is similar to async, but it ensures that scripts are executed in the order they are specified in the HTML.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Integrity(System.String)">
            <summary>
                integrity = <paramref name="value"/>
            <br/>
                Specifies a subresource integrity (SRI) hash for the script. This helps to protect against man-in-the-middle attacks.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Language(System.String)">
            <summary>
                language = <paramref name="value"/>
            <br/>
                Specifies the scripting language of the script. This is deprecated, but is still supported by most browsers.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Nomodule(System.String)">
            <summary>
                nomodule = <paramref name="value"/>
            <br/>
                Specifies that the script should be ignored if the browser does not support modules.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Src(System.String)">
            <summary>
                src = <paramref name="value"/>
            <br/>
                Specifies the URL of an external script file.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.script.Type(System.String)">
            <summary>
                type = <paramref name="value"/>
            <br/>
                Specifies the type of the script. The most common value is application/javascript.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.title.language">
            <summary>
                Specifies the language of the title.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.title.Language(System.String)">
            <summary>
                language = <paramref name="value"/>
            <br/>
                Specifies the language of the title.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.head.profile">
            <summary>
                Provides a URL to a profile document for the current document.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.head.link">
            <summary>
                Provides a link to an external resource, such as a stylesheet or script file.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.head.meta">
            <summary>
                Provides metadata about the document, such as the character encoding, author, and keywords.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.head.script">
            <summary>
                Provides JavaScript code to be executed in the browser.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.head.noscript">
            <summary>
                Provides content to be displayed if the browser does not support JavaScript.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.head.Profile(System.String)">
            <summary>
                profile = <paramref name="value"/>
            <br/>
                Provides a URL to a profile document for the current document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.head.Link(System.String)">
            <summary>
                link = <paramref name="value"/>
            <br/>
                Provides a link to an external resource, such as a stylesheet or script file.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.head.Meta(System.String)">
            <summary>
                meta = <paramref name="value"/>
            <br/>
                Provides metadata about the document, such as the character encoding, author, and keywords.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.head.Script(System.String)">
            <summary>
                script = <paramref name="value"/>
            <br/>
                Provides JavaScript code to be executed in the browser.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.head.Noscript(System.String)">
            <summary>
                noscript = <paramref name="value"/>
            <br/>
                Provides content to be displayed if the browser does not support JavaScript.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.html.hidden">
            <summary>
                Hides the element from display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.html.manifest">
            <summary>
                Specifies the URL of a manifest file, which provides information about the web app.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.html.xmlns">
            <summary>
                Specifies the namespace of the element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.html.prefix">
            <summary>
                Specifies the prefix of the element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.html.version">
            <summary>
                Specifies the version of the HTML specification to which the element conforms.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.html.Hidden(System.String)">
            <summary>
                hidden = <paramref name="value"/>
            <br/>
                Hides the element from display.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.html.Manifest(System.String)">
            <summary>
                manifest = <paramref name="value"/>
            <br/>
                Specifies the URL of a manifest file, which provides information about the web app.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.html.Xmlns(System.String)">
            <summary>
                xmlns = <paramref name="value"/>
            <br/>
                Specifies the namespace of the element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.html.Prefix(System.String)">
            <summary>
                prefix = <paramref name="value"/>
            <br/>
                Specifies the prefix of the element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.html.Version(System.String)">
            <summary>
                version = <paramref name="value"/>
            <br/>
                Specifies the version of the HTML specification to which the element conforms.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.style.type">
            <summary>
                Specifies the MIME type of the `style` content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.style.media">
            <summary>
                Specifies the media type(s) for which the styles are intended.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.style.scoped">
            <summary>
                Indicates that the styles are scoped to the parent element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.style.Type(System.String)">
            <summary>
                type = <paramref name="value"/>
            <br/>
                Specifies the MIME type of the `style` content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.style.Media(System.String)">
            <summary>
                media = <paramref name="value"/>
            <br/>
                Specifies the media type(s) for which the styles are intended.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.style.Scoped(ReactWithDotNet.UnionProp{System.String,System.Boolean})">
            <summary>
                scoped = <paramref name="value"/>
            <br/>
                Indicates that the styles are scoped to the parent element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.label.htmlFor">
            <summary>
                Specifies which form element a label is bound to.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.label.dropzone">
            <summary>
                Specifies whether the element is a drop target.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.label.hidden">
            <summary>
                Hides the element from view.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.label.tabindex">
            <summary>
                Specifies the element's position in the tab order.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.label.HtmlFor(System.String)">
            <summary>
                htmlFor = <paramref name="value"/>
            <br/>
                Specifies which form element a label is bound to.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.label.Dropzone(System.String)">
            <summary>
                dropzone = <paramref name="value"/>
            <br/>
                Specifies whether the element is a drop target.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.label.Hidden(System.String)">
            <summary>
                hidden = <paramref name="value"/>
            <br/>
                Hides the element from view.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.label.Tabindex(System.String)">
            <summary>
                tabindex = <paramref name="value"/>
            <br/>
                Specifies the element's position in the tab order.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.href">
            <summary>
                The URL of the linked resource.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.target">
            <summary>
                Specifies where the linked resource should be opened. Can be `_blank`, `_self`, `_parent`, or `_top`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.rel">
            <summary>
                Specifies the relationship between the current document and the linked resource. Can be `alternate`, `author`, `bookmark`, `canonical`, `external`, `help`, `license`, `next`, `nofollow`, `noreferrer`, `noopener`, `prev`, `search`, `sponsored`, or `stylesheet`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.type">
            <summary>
                Specifies the MIME type of the linked resource, if applicable.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.download">
            <summary>
                Specifies whether the linked resource should be downloaded or opened in a new browser tab.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.ping">
            <summary>
                A list of URLs to which a ping should be sent when the user clicks on the link.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.media">
            <summary>
                Specifies the media types for which the link is relevant.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.hreflang">
            <summary>
                Specifies the language of the linked resource.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.name">
            <summary>
                Specifies a name for the link. This can be used to target the link with JavaScript.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.tabindex">
            <summary>
                Specifies the tab order of the link.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Href(System.String)">
            <summary>
                href = <paramref name="value"/>
            <br/>
                The URL of the linked resource.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Target(System.String)">
            <summary>
                target = <paramref name="value"/>
            <br/>
                Specifies where the linked resource should be opened. Can be `_blank`, `_self`, `_parent`, or `_top`.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Rel(System.String)">
            <summary>
                rel = <paramref name="value"/>
            <br/>
                Specifies the relationship between the current document and the linked resource. Can be `alternate`, `author`, `bookmark`, `canonical`, `external`, `help`, `license`, `next`, `nofollow`, `noreferrer`, `noopener`, `prev`, `search`, `sponsored`, or `stylesheet`.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Type(System.String)">
            <summary>
                type = <paramref name="value"/>
            <br/>
                Specifies the MIME type of the linked resource, if applicable.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Download(System.String)">
            <summary>
                download = <paramref name="value"/>
            <br/>
                Specifies whether the linked resource should be downloaded or opened in a new browser tab.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Ping(System.String)">
            <summary>
                ping = <paramref name="value"/>
            <br/>
                A list of URLs to which a ping should be sent when the user clicks on the link.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Media(System.String)">
            <summary>
                media = <paramref name="value"/>
            <br/>
                Specifies the media types for which the link is relevant.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Hreflang(System.String)">
            <summary>
                hreflang = <paramref name="value"/>
            <br/>
                Specifies the language of the linked resource.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Name(System.String)">
            <summary>
                name = <paramref name="value"/>
            <br/>
                Specifies a name for the link. This can be used to target the link with JavaScript.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Tabindex(System.String)">
            <summary>
                tabindex = <paramref name="value"/>
            <br/>
                Specifies the tab order of the link.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.src">
            <summary>
                The URL of the image file.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.srcset">
            <summary>
                A list of image files to use in different situations, such as different screen sizes or device types.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.usemap">
            <summary>
                Specifies an image as a client-side image map.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.alt">
            <summary>
                An alternate text for the image, if the image for some reason cannot be displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.width">
            <summary>
                The width of the image, in pixels.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.height">
            <summary>
                The height of the image, in pixels.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.ismap">
            <summary>
                A Boolean attribute that indicates whether the image is an image map.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.longdesc">
            <summary>
                A longer description of the image, for use by screen readers and other assistive technologies.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.crossorigin">
            <summary>
                A string that specifies the CORS setting for the image.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.loading">
            <summary>
                A string that specifies how the image should be loaded.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.decoding">
            <summary>
                A string that specifies how the image should be decoded.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.img.referrerpolicy">
            <summary>
                A string that specifies how much referrer information is sent with requests for the image.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Src(System.String)">
            <summary>
                src = <paramref name="value"/>
            <br/>
                The URL of the image file.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Srcset(System.String)">
            <summary>
                srcset = <paramref name="value"/>
            <br/>
                A list of image files to use in different situations, such as different screen sizes or device types.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Usemap(System.String)">
            <summary>
                usemap = <paramref name="value"/>
            <br/>
                Specifies an image as a client-side image map.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Alt(System.String)">
            <summary>
                alt = <paramref name="value"/>
            <br/>
                An alternate text for the image, if the image for some reason cannot be displayed.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Width(ReactWithDotNet.UnionProp{System.String,System.Nullable{System.Double}})">
            <summary>
                width = <paramref name="value"/>
            <br/>
                The width of the image, in pixels.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Height(ReactWithDotNet.UnionProp{System.String,System.Nullable{System.Double}})">
            <summary>
                height = <paramref name="value"/>
            <br/>
                The height of the image, in pixels.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Ismap(System.String)">
            <summary>
                ismap = <paramref name="value"/>
            <br/>
                A Boolean attribute that indicates whether the image is an image map.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Longdesc(System.String)">
            <summary>
                longdesc = <paramref name="value"/>
            <br/>
                A longer description of the image, for use by screen readers and other assistive technologies.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Crossorigin(System.String)">
            <summary>
                crossorigin = <paramref name="value"/>
            <br/>
                A string that specifies the CORS setting for the image.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Loading(System.String)">
            <summary>
                loading = <paramref name="value"/>
            <br/>
                A string that specifies how the image should be loaded.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Decoding(System.String)">
            <summary>
                decoding = <paramref name="value"/>
            <br/>
                A string that specifies how the image should be decoded.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.img.Referrerpolicy(System.String)">
            <summary>
                referrerpolicy = <paramref name="value"/>
            <br/>
                A string that specifies how much referrer information is sent with requests for the image.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.preserveAspectRatio">
            <summary>
                Specifies how the SVG element should be scaled and aligned to fit its viewport.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.width">
            <summary>
                The width of the SVG element in pixels.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.height">
            <summary>
                The height of the SVG element in pixels.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.xmlns">
            <summary>
                The namespace URI for the SVG element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.version">
            <summary>
                The SVG version of the element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.stroke">
            <summary>
                The stroke color of the ellipse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.strokeWidth">
            <summary>
                The width of the stroke.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.strokeLinecap">
            <summary>
                The style of the line's endpoints.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.strokeLinejoin">
            <summary>
                The style of the line's corners.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.strokeOpacity">
            <summary>
                The opacity (transparency) of the line's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.PreserveAspectRatio(System.String)">
            <summary>
                preserveAspectRatio = <paramref name="value"/>
            <br/>
                Specifies how the SVG element should be scaled and aligned to fit its viewport.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Width(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                width = <paramref name="value"/>
            <br/>
                The width of the SVG element in pixels.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Height(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                height = <paramref name="value"/>
            <br/>
                The height of the SVG element in pixels.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Xmlns(System.String)">
            <summary>
                xmlns = <paramref name="value"/>
            <br/>
                The namespace URI for the SVG element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Version(System.String)">
            <summary>
                version = <paramref name="value"/>
            <br/>
                The SVG version of the element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Stroke(System.String)">
            <summary>
                stroke = <paramref name="value"/>
            <br/>
                The stroke color of the ellipse.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.StrokeWidth(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                strokeWidth = <paramref name="value"/>
            <br/>
                The width of the stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.StrokeLinecap(System.String)">
            <summary>
                strokeLinecap = <paramref name="value"/>
            <br/>
                The style of the line's endpoints.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.StrokeLinejoin(System.String)">
            <summary>
                strokeLinejoin = <paramref name="value"/>
            <br/>
                The style of the line's corners.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.StrokeOpacity(System.String)">
            <summary>
                strokeOpacity = <paramref name="value"/>
            <br/>
                The opacity (transparency) of the line's stroke.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Size(System.Double,System.Double)">
            <summary>
                svg.width = <paramref name="width" /> + 'px'
                <br/>
                svg.height = <paramref name="height" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Size(System.String,System.String)">
            <summary>
                svg.width = <paramref name="width" />
                <br/>
                svg.height = <paramref name="height" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Size(System.Double)">
            <summary>
                svg.width = <paramref name="size" /> + 'px'
                <br/>
                svg.height = <paramref name="size" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.ViewBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                svg.viewBox = '<paramref name="minX" /> <paramref name="minY" /> <paramref name="width" /> <paramref name="height" />'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.FocusableFalse">
            <summary>
                svg.focusable = false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.FocusableTrue">
            <summary>
                svg.focusable = true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.svg.FocusableAuto">
            <summary>
                svg.focusable = auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.symbol.viewBox">
            <summary>
                Defines the position and dimension, in user space, of an SVG viewport.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.symbol.preserveAspectRatio">
            <summary>
                Indicates how an element should preserve its aspect ratio when the viewBox is different from the viewport.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.symbol.externalResourcesRequired">
            <summary>
                Specifies whether the rendering of the 'symbol' element is dependent on external resources.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.symbol.transform">
            <summary>
                Applies a transformation to the element, such as scaling, rotating, or translating.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.symbol.ViewBox(System.String)">
            <summary>
                viewBox = <paramref name="value"/>
            <br/>
                Defines the position and dimension, in user space, of an SVG viewport.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.symbol.PreserveAspectRatio(System.String)">
            <summary>
                preserveAspectRatio = <paramref name="value"/>
            <br/>
                Indicates how an element should preserve its aspect ratio when the viewBox is different from the viewport.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.symbol.ExternalResourcesRequired(System.String)">
            <summary>
                externalResourcesRequired = <paramref name="value"/>
            <br/>
                Specifies whether the rendering of the 'symbol' element is dependent on external resources.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.symbol.Transform(System.String)">
            <summary>
                transform = <paramref name="value"/>
            <br/>
                Applies a transformation to the element, such as scaling, rotating, or translating.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.src">
            <summary>
                Specifies the URL of the video file.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.controls">
            <summary>
                Specifies that video controls (play, pause, etc.) should be displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.autoplay">
            <summary>
                Specifies that the video will start playing as soon as it is ready.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.loop">
            <summary>
                Specifies that the video will start over again, every time it is finished.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.muted">
            <summary>
                Specifies that the audio output of the video should be muted.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.poster">
            <summary>
                Specifies an image to be shown while the video is downloading or until the user hits the play button.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.preload">
            <summary>
                Specifies how the video should be loaded when the page loads. Values include 'auto', 'metadata', or 'none'.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.width">
            <summary>
                Sets the width of the video player.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.height">
            <summary>
                Sets the height of the video player.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.playsinline">
            <summary>
                Specifies that the video should play inline on mobile devices instead of going fullscreen.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.video.crossorigin">
            <summary>
                Specifies how the element handles cross-origin requests for the video.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Src(System.String)">
            <summary>
                src = <paramref name="value"/>
            <br/>
                Specifies the URL of the video file.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Controls(System.String)">
            <summary>
                controls = <paramref name="value"/>
            <br/>
                Specifies that video controls (play, pause, etc.) should be displayed.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Autoplay(System.String)">
            <summary>
                autoplay = <paramref name="value"/>
            <br/>
                Specifies that the video will start playing as soon as it is ready.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Loop(System.String)">
            <summary>
                loop = <paramref name="value"/>
            <br/>
                Specifies that the video will start over again, every time it is finished.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Muted(System.String)">
            <summary>
                muted = <paramref name="value"/>
            <br/>
                Specifies that the audio output of the video should be muted.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Poster(System.String)">
            <summary>
                poster = <paramref name="value"/>
            <br/>
                Specifies an image to be shown while the video is downloading or until the user hits the play button.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Preload(System.String)">
            <summary>
                preload = <paramref name="value"/>
            <br/>
                Specifies how the video should be loaded when the page loads. Values include 'auto', 'metadata', or 'none'.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Width(System.String)">
            <summary>
                width = <paramref name="value"/>
            <br/>
                Sets the width of the video player.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Height(System.String)">
            <summary>
                height = <paramref name="value"/>
            <br/>
                Sets the height of the video player.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Playsinline(System.String)">
            <summary>
                playsinline = <paramref name="value"/>
            <br/>
                Specifies that the video should play inline on mobile devices instead of going fullscreen.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.video.Crossorigin(System.String)">
            <summary>
                crossorigin = <paramref name="value"/>
            <br/>
                Specifies how the element handles cross-origin requests for the video.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.src">
            <summary>
                Specifies the URL of the media file.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.type">
            <summary>
                Specifies the MIME type of the media resource.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.srcset">
            <summary>
                Specifies a list of image sources for responsive images.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.sizes">
            <summary>
                Specifies the sizes of images for different viewport widths.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.media">
            <summary>
                Specifies the media condition that must be met for the resource to be used.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.width">
            <summary>
                Specifies the width of the image for the srcset attribute.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.height">
            <summary>
                Specifies the height of the image for the srcset attribute.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.keytype">
            <summary>
                Specifies the type of key for media encryption (used in some DRM scenarios).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.source.referrerpolicy">
            <summary>
                Specifies the referrer information to send when fetching the resource.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Src(System.String)">
            <summary>
                src = <paramref name="value"/>
            <br/>
                Specifies the URL of the media file.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Type(System.String)">
            <summary>
                type = <paramref name="value"/>
            <br/>
                Specifies the MIME type of the media resource.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Srcset(System.String)">
            <summary>
                srcset = <paramref name="value"/>
            <br/>
                Specifies a list of image sources for responsive images.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Sizes(System.String)">
            <summary>
                sizes = <paramref name="value"/>
            <br/>
                Specifies the sizes of images for different viewport widths.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Media(System.String)">
            <summary>
                media = <paramref name="value"/>
            <br/>
                Specifies the media condition that must be met for the resource to be used.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Width(System.String)">
            <summary>
                width = <paramref name="value"/>
            <br/>
                Specifies the width of the image for the srcset attribute.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Height(System.String)">
            <summary>
                height = <paramref name="value"/>
            <br/>
                Specifies the height of the image for the srcset attribute.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Keytype(System.String)">
            <summary>
                keytype = <paramref name="value"/>
            <br/>
                Specifies the type of key for media encryption (used in some DRM scenarios).
            </summary>
        </member>
        <member name="M:ReactWithDotNet.source.Referrerpolicy(System.String)">
            <summary>
                referrerpolicy = <paramref name="value"/>
            <br/>
                Specifies the referrer information to send when fetching the resource.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.action">
            <summary>
                Specifies the URL of the page where the form data will be submitted.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.method">
            <summary>
                Specifies how the form data will be sent to the server. Possible values are 'get' and 'post'.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.enctype">
            <summary>
                Specifies the encoding type for form data. Possible values are 'application/x-www-form-urlencoded' and 'multipart/form-data'.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.target">
            <summary>
                Specifies the name of the frame where the form will be submitted. The default value is '_self', which means the form will be submitted in the current frame.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.name">
            <summary>
                Specifies a name for the form. This name is used to reference the form in JavaScript or to reference form data after a form is submitted.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.novalidate">
            <summary>
                Disables form validation. This attribute is useful when you want to submit the form without validating the user input.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.form.autocomplete">
            <summary>
                Specifies whether the browser should automatically fill in form fields based on the user's past input.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Action(System.String)">
            <summary>
                action = <paramref name="value"/>
            <br/>
                Specifies the URL of the page where the form data will be submitted.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Method(System.String)">
            <summary>
                method = <paramref name="value"/>
            <br/>
                Specifies how the form data will be sent to the server. Possible values are 'get' and 'post'.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Enctype(System.String)">
            <summary>
                enctype = <paramref name="value"/>
            <br/>
                Specifies the encoding type for form data. Possible values are 'application/x-www-form-urlencoded' and 'multipart/form-data'.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Target(System.String)">
            <summary>
                target = <paramref name="value"/>
            <br/>
                Specifies the name of the frame where the form will be submitted. The default value is '_self', which means the form will be submitted in the current frame.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Name(System.String)">
            <summary>
                name = <paramref name="value"/>
            <br/>
                Specifies a name for the form. This name is used to reference the form in JavaScript or to reference form data after a form is submitted.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Novalidate(System.String)">
            <summary>
                novalidate = <paramref name="value"/>
            <br/>
                Disables form validation. This attribute is useful when you want to submit the form without validating the user input.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.form.Autocomplete(System.String)">
            <summary>
                autocomplete = <paramref name="value"/>
            <br/>
                Specifies whether the browser should automatically fill in form fields based on the user's past input.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.name">
            <summary>
                Specifies a name for the textarea element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.cols">
            <summary>
                Specifies the visible width of the textarea element in characters.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.rows">
            <summary>
                Specifies the number of visible lines in the textarea element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.placeholder">
            <summary>
                Specifies a short hint that describes the expected value of the textarea element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.readOnly">
            <summary>
                Disables user input in the textarea element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.required">
            <summary>
                Indicates that the textarea element must be filled out before the form is submitted.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.autofocus">
            <summary>
                Automatically gives focus to the textarea element when the page loads.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.autocomplete">
            <summary>
                Specifies that the user's browser should automatically complete the textarea element's value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.dirname">
            <summary>
                Specifies the directory to use as the default value for the 'file' input type.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.form">
            <summary>
                Specifies the ID of the form that the textarea element belongs to.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.maxlength">
            <summary>
                Specifies the maximum number of characters that can be entered into the textarea element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.minlength">
            <summary>
                Specifies the minimum number of characters that must be entered into the textarea element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.wrap">
            <summary>
                Specifies whether the text in the textarea element should wrap to the next line when it reaches the end of the visible area.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.defaultValue">
            <summary>
                A string. Specifies the initial value for a text area.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.onBlur">
            <summary>
                Occurs when an element loses focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="P:ReactWithDotNet.textarea.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Name(System.String)">
            <summary>
                name = <paramref name="value"/>
            <br/>
                Specifies a name for the textarea element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Cols(ReactWithDotNet.UnionProp{System.String,System.Nullable{System.Int32}})">
            <summary>
                cols = <paramref name="value"/>
            <br/>
                Specifies the visible width of the textarea element in characters.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Rows(ReactWithDotNet.UnionProp{System.String,System.Nullable{System.Int32}})">
            <summary>
                rows = <paramref name="value"/>
            <br/>
                Specifies the number of visible lines in the textarea element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Placeholder(System.String)">
            <summary>
                placeholder = <paramref name="value"/>
            <br/>
                Specifies a short hint that describes the expected value of the textarea element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.ReadOnly(ReactWithDotNet.UnionProp{System.String,System.Boolean})">
            <summary>
                readOnly = <paramref name="value"/>
            <br/>
                Disables user input in the textarea element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Required(System.String)">
            <summary>
                required = <paramref name="value"/>
            <br/>
                Indicates that the textarea element must be filled out before the form is submitted.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Autofocus(System.String)">
            <summary>
                autofocus = <paramref name="value"/>
            <br/>
                Automatically gives focus to the textarea element when the page loads.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Autocomplete(System.String)">
            <summary>
                autocomplete = <paramref name="value"/>
            <br/>
                Specifies that the user's browser should automatically complete the textarea element's value.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Dirname(System.String)">
            <summary>
                dirname = <paramref name="value"/>
            <br/>
                Specifies the directory to use as the default value for the 'file' input type.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Form(System.String)">
            <summary>
                form = <paramref name="value"/>
            <br/>
                Specifies the ID of the form that the textarea element belongs to.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Maxlength(System.String)">
            <summary>
                maxlength = <paramref name="value"/>
            <br/>
                Specifies the maximum number of characters that can be entered into the textarea element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Minlength(System.String)">
            <summary>
                minlength = <paramref name="value"/>
            <br/>
                Specifies the minimum number of characters that must be entered into the textarea element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.Wrap(System.String)">
            <summary>
                wrap = <paramref name="value"/>
            <br/>
                Specifies whether the text in the textarea element should wrap to the next line when it reaches the end of the visible area.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.DefaultValue(System.String)">
            <summary>
                defaultValue = <paramref name="value"/>
            <br/>
                A string. Specifies the initial value for a text area.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.OnBlur(ReactWithDotNet.FocusEventHandler)">
            <summary>
                onBlur = <paramref name="value"/>
            <br/>
                Occurs when an element loses focus.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.ValueBindDebounceTimeout(System.Nullable{System.Int32})">
            <summary>
                valueBindDebounceTimeout = <paramref name="value"/>
            <br/>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="M:ReactWithDotNet.textarea.ValueBindDebounceHandler(System.Func{System.Threading.Tasks.Task})">
            <summary>
                valueBindDebounceHandler = <paramref name="value"/>
            <br/>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.src">
            <summary>
                Specifies the URL of the document to embed in the iframe
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.srcDoc">
            <summary>
                Provides the HTML content to be embedded directly within the iframe
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.name">
            <summary>
                Assigns a name to the iframe, which can be used for targeting links
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.width">
            <summary>
                Defines the width of the iframe
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.height">
            <summary>
                Defines the height of the iframe
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.sandbox">
            <summary>
                Enables an extra set of restrictions for the content in the iframe
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.allow">
            <summary>
                Controls features within the iframe, such as fullscreen, camera, microphone, etc.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.allowFullScreen">
            <summary>
                Allows the iframe to display content in fullscreen mode
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.referrerPolicy">
            <summary>
                Controls how much referrer information should be included with requests
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.loading">
            <summary>
                Specifies whether the iframe should be loaded lazily or eagerly
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.csp">
            <summary>
                Adds a Content Security Policy for the iframe's content
            </summary>
        </member>
        <member name="P:ReactWithDotNet.iframe.hidden">
            <summary>
                Hides the iframe
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Src(System.String)">
            <summary>
                src = <paramref name="value"/>
            <br/>
                Specifies the URL of the document to embed in the iframe
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.SrcDoc(System.String)">
            <summary>
                srcDoc = <paramref name="value"/>
            <br/>
                Provides the HTML content to be embedded directly within the iframe
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Name(System.String)">
            <summary>
                name = <paramref name="value"/>
            <br/>
                Assigns a name to the iframe, which can be used for targeting links
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Width(System.String)">
            <summary>
                width = <paramref name="value"/>
            <br/>
                Defines the width of the iframe
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Height(System.String)">
            <summary>
                height = <paramref name="value"/>
            <br/>
                Defines the height of the iframe
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Sandbox(System.String)">
            <summary>
                sandbox = <paramref name="value"/>
            <br/>
                Enables an extra set of restrictions for the content in the iframe
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Allow(System.String)">
            <summary>
                allow = <paramref name="value"/>
            <br/>
                Controls features within the iframe, such as fullscreen, camera, microphone, etc.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.AllowFullScreen(System.String)">
            <summary>
                allowFullScreen = <paramref name="value"/>
            <br/>
                Allows the iframe to display content in fullscreen mode
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.ReferrerPolicy(System.String)">
            <summary>
                referrerPolicy = <paramref name="value"/>
            <br/>
                Controls how much referrer information should be included with requests
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Loading(System.String)">
            <summary>
                loading = <paramref name="value"/>
            <br/>
                Specifies whether the iframe should be loaded lazily or eagerly
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Csp(System.String)">
            <summary>
                csp = <paramref name="value"/>
            <br/>
                Adds a Content Security Policy for the iframe's content
            </summary>
        </member>
        <member name="M:ReactWithDotNet.iframe.Hidden(System.String)">
            <summary>
                hidden = <paramref name="value"/>
            <br/>
                Hides the iframe
            </summary>
        </member>
        <member name="P:ReactWithDotNet.select.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="P:ReactWithDotNet.select.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="M:ReactWithDotNet.select.ValueBindDebounceTimeout(System.Nullable{System.Int32})">
            <summary>
                valueBindDebounceTimeout = <paramref name="value"/>
            <br/>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="M:ReactWithDotNet.select.ValueBindDebounceHandler(System.Func{System.Threading.Tasks.Task})">
            <summary>
                valueBindDebounceHandler = <paramref name="value"/>
            <br/>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.autoFocus">
            <summary>
                Element must automatically get focus when the page loads.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.onBlur">
            <summary>
                Occurs when an element loses focus.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.input.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
                autoFocus = <paramref name="value"/>
            <br/>
                Element must automatically get focus when the page loads.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.input.ValueBindDebounceTimeout(System.Nullable{System.Int32})">
            <summary>
                valueBindDebounceTimeout = <paramref name="value"/>
            <br/>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="M:ReactWithDotNet.input.ValueBindDebounceHandler(System.Func{System.Threading.Tasks.Task})">
            <summary>
                valueBindDebounceHandler = <paramref name="value"/>
            <br/>
                if you want to handle when user iteraction finished see example below
                component.valueBind = ()=>state.UserInfo.Name
                component.valueBindDebounceTimeout = 600 // milliseconds
                component.valueBindDebounceHandler = OnUserIterationFinished
            </summary>
        </member>
        <member name="M:ReactWithDotNet.input.OnBlur(ReactWithDotNet.FocusEventHandler)">
            <summary>
                onBlur = <paramref name="value"/>
            <br/>
                Occurs when an element loses focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.data">
            <summary>
                The data-* attribute is used to store custom data private to the page or application.
                <br />
                The data-* attribute gives us the ability to embed custom data attributes on all HTML elements.
                <br />
                The stored (custom) data can then be used in the page's JavaScript to create a more engaging user experience
                (without any Ajax calls or server-side database queries).
                <br />
                The data-* attribute consist of two parts:
                <br />
                The attribute name should not contain any uppercase letters, and must be at least one character long after the
                prefix "data-"<br />
                The attribute value can be any string<br />
                Note: Custom attributes prefixed with "data-" will be completely ignored by the user agent.<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.innerText">
            <summary>
                'innerText' property of element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.onClickPreview">
            <summary>
            TODO: comment here
            </summary>
        </member>
        <member name="F:ReactWithDotNet.HtmlElement.style">
            <summary>
                Gets the style.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.Style">
            <summary>
                Imports filled values given style
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.text">
            <summary>
                'innerText' property of element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.HtmlElement.AddClass(System.String)">
            <summary>
                Adds given cssClassName ot class attribute of html element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.canvas.width">
            <summary>
                Defines the width of the canvas in pixels
            </summary>
        </member>
        <member name="P:ReactWithDotNet.canvas.height">
            <summary>
                Defines the height of the canvas in pixels
            </summary>
        </member>
        <member name="M:ReactWithDotNet.canvas.Width(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                width = <paramref name="value"/>
            <br/>
                Defines the width of the canvas in pixels
            </summary>
        </member>
        <member name="M:ReactWithDotNet.canvas.Height(ReactWithDotNet.UnionProp{System.String,System.Double})">
            <summary>
                height = <paramref name="value"/>
            <br/>
                Defines the height of the canvas in pixels
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ReactComponentBase.DesignMode">
            <summary>
              Indicates component is in design mode.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.DispatchEvent(System.Delegate,System.String)">
            <summary>
               Dispatch given <paramref name="handlerFunc"/> as event.
               <br/>
               Sample usage:
            <code> 
               DispatchEvent(OnUserChanged, [new UserInfo { Name = '..'}] );
            </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.DispatchEvent(System.Delegate,System.Object[],System.String)">
            <summary>
               Dispatch given <paramref name="handlerFunc"/> as event.
               <br/>
               Sample usage:
            <code> 
               DispatchEvent(OnUserChanged, [new UserInfo { Name = '..'}] );
            </code>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.componentDidCatch(System.Exception)">
            <summary>
                When any exception occurred in render method then this method will be call.
                <code>
                protected override Element componentDidCatch(Exception exceptionOccurredInRender)
                {
                    return new div(Color("red"))
                    {
                        exceptionOccurredInRender.ToString()
                    };
                }
                </code>
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Element">
            <summary>
                The element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Element.children">
            <summary>
                The children
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Element.key">
            <summary>
                Gets or sets the key.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.Add(ReactWithDotNet.Element)">
            <summary>
                Adds the specified element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.Add(System.Func{ReactWithDotNet.Element})">
            <summary>
                Invokes <paramref name="elementCreatorFunc" /> then adds return value to children.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.Add(System.Func{System.Threading.Tasks.Task{ReactWithDotNet.Element}})">
            <summary>
                Invokes <paramref name="elementCreatorFunc" /> then adds return value to children.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.GetEnumerator">
            <summary>
                Gets the enumerator.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ElementCollection.Add(System.Func{ReactWithDotNet.Element})">
            <summary>
                Invokes <paramref name="elementCreatorFunc" /> then adds return value to list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromEnd(System.String,System.String)">
            <summary>
                Removes value from end of str
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromEnd(System.String,System.String,System.StringComparison)">
            <summary>
                Removes from end.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromStart(System.String,System.String)">
            <summary>
                Removes value from start of str
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromStart(System.String,System.String,System.StringComparison)">
            <summary>
                Removes value from start of str
            </summary>
        </member>
        <member name="P:ReactWithDotNet.FunctionalComponent.State.Scope">
            <summary>
                Scope means value of auto generated fields of CompilerGeneratedType instance.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexRow">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRow.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRow.#ctor(System.String)">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRow.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRow.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexRow">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRow.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRow.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRow.#ctor(System.String)">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRow.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexColumn">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumn.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumn.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumn.#ctor(System.String)">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumn.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexColumn">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumn.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumn.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "inline-column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumn.#ctor(System.String)">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "inline-column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumn.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "inline-column"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexRowCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRowCentered.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRowCentered.#ctor(System.String)">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRowCentered.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRowCentered.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexRowCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRowCentered.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRowCentered.#ctor(System.String)">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRowCentered.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRowCentered.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexColumnCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumnCentered.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumnCentered.#ctor(System.String)">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumnCentered.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumnCentered.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexColumnCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumnCentered.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumnCentered.#ctor(System.String)">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumnCentered.#ctor(ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumnCentered.#ctor(System.String,ReactWithDotNet.Modifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="F:ReactWithDotNet.CssUnit.em">
            <summary>
                2|em returns like '2em'
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Modifier">
            <summary>
                Designed for modify an element by functional way <br/>
                Example: <br/>
                <code>
                -- normal aproach 
                var element = new div();
                element.style.width = "50px";
            
                -- better approach
                new div { Width(50) } 
                </code>
                <br/>
                Inherited types : <br/>
                <see cref="T:ReactWithDotNet.StyleModifier"/> <br/>
                <see cref="T:ReactWithDotNet.ElementModifier"/>
            </summary>
        </member>
        <member name="T:ReactWithDotNet.PureComponent">
            <summary>
                PureComponent is similar to Component but it skips re-renders for same props and state.
                <br />
                https://react.dev/reference/react/PureComponent
            </summary>
        </member>
        <member name="P:ReactWithDotNet.PureComponent.DesignMode">
            <summary>
              Indicates component is in design mode.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.PureComponent.componentDidCatch(System.Exception)">
            <summary>
                When any exception occurred in render method then this method will be call.
                <code>
                protected override Element componentDidCatch(Exception exceptionOccurredInRender)
                {
                    return new div(Color("red"))
                    {
                        exceptionOccurredInRender.ToString()
                    };
                }
                </code>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ClientForPureComponent.Height">
            <summary>
                Client size information will be available after the first request.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ClientForPureComponent.Width">
            <summary>
                Client size information will be available after the first request.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ClientForPureComponent.WidthHasMatch(System.Func{ReactWithDotNet.StyleModifier[],ReactWithDotNet.StyleModifier})">
            <summary>
             Sample usage:
                <code>
                
                 if (Client.WidthHasMatch(SM))
                 {
                     // 
                 }
                
                </code>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Style.leftBottom">
            <summary>
                left = <paramref name="value"/>
                <br/>
                bottom = <paramref name="value"/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Style.rightBottom">
            <summary>
                right = <paramref name="value"/>
                <br/>
                bottom = <paramref name="value"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Style.op_Addition(ReactWithDotNet.Style,ReactWithDotNet.StyleModifier)">
            <summary>
                Add given <paramref name="styleModifier" /> to <paramref name="style" />
                <br />
                if <paramref name="style" /> is null then returns null.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.MediaQuery">
            <summary>
                Example:
                <br />
                new MediaQuery("only screen and (max-width: 600px)", new Style { width:"5px" }
            </summary>
        </member>
        <member name="M:ReactWithDotNet.MediaQuery.#ctor(System.String,ReactWithDotNet.Style)">
            <summary>
                Example:
                <br />
                new MediaQuery("only screen and (max-width: 600px)", new Style { width:"5px" }
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MonacoEditorReact.Editor.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MonacoEditorReact.Editor.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MonacoEditorReact.Editor.options">
            <summary>
            https://microsoft.github.io/monaco-editor/typedoc/variables/editor.EditorOptions.html
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.defaultExpanded">
            <summary>
                If `true`, expands the accordion by default.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.DefaultExpanded(System.Nullable{System.Boolean})">
            <summary>
                If `true`, expands the accordion by default.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.Disabled(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.disableGutters">
            <summary>
                If `true`, it removes the margin between two expanded accordion items and the increase of height.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.DisableGutters(System.Nullable{System.Boolean})">
            <summary>
                If `true`, it removes the margin between two expanded accordion items and the increase of height.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.expanded">
            <summary>
                If `true`, expands the accordion, otherwise collapse it.
                <br/>
                Setting this prop enables control over the accordion.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.Expanded(System.Nullable{System.Boolean})">
            <summary>
                If `true`, expands the accordion, otherwise collapse it.
                <br/>
                Setting this prop enables control over the accordion.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.onChange">
            <summary>
                Callback fired when the expand/collapse state is changed.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
                <br/>
                @param {boolean} expanded The `expanded` state of the accordion.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.OnChange(System.Func{ReactWithDotNet.MouseEvent,System.Nullable{System.Boolean},System.Threading.Tasks.Task})">
            <summary>
                Callback fired when the expand/collapse state is changed.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
                <br/>
                @param {boolean} expanded The `expanded` state of the accordion.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Accordion.GetSuspenseFallbackElement">
            <summary>
                The component used for the transition.
                <br/>
                [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
                <br/>
                @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.AccordionDetails.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.AccordionDetails.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.AccordionSummary.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.AccordionSummary.expandIcon">
            <summary>
                The icon to display as the expand indicator.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.AccordionSummary.ExpandIcon(ReactWithDotNet.Element)">
            <summary>
                The icon to display as the expand indicator.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.AccordionSummary.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.severity">
            <summary>
            The severity of the alert. This defines the color and icon.
            'error' | 'info' | 'success' | 'warning'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.variant">
            <summary>
            The variant to use. 'standard' | 'outlined' | 'filled'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.classes">
            <summary>
            Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.role">
            <summary>
            The ARIA role attribute of the element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.color">
            <summary>
            The component maps the `color` prop to the theme palette.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.onClose">
            <summary>
            Callback fired when the close icon is clicked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.sx">
            <summary>
            The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Alert.id">
            <summary>
            The id of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.clearIcon">
            <summary>
                Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.
                <br/>
                @deprecated Use `slotProps.chip` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
            <summary>
                The icon to display in place of the default clear icon.
                <br/>
                @default &lt;ClearIcon fontSize="small" /&gt;
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.ClearIcon(ReactWithDotNet.Element)">
            <summary>
                The icon to display in place of the default clear icon.
                <br/>
                @default &lt;ClearIcon fontSize="small" /&gt;
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.clearText">
            <summary>
                Override the default text for the *clear* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Clear'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.ClearText(System.String)">
            <summary>
                Override the default text for the *clear* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Clear'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.closeText">
            <summary>
                Override the default text for the *close popup* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Close'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.CloseText(System.String)">
            <summary>
                Override the default text for the *close popup* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Close'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.componentsProps">
            <summary>
                The props used for each slot inside.
                <br/>
                @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.Disabled(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.disablePortal">
            <summary>
                If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.DisablePortal(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.forcePopupIcon">
            <summary>
                Force the visibility display of the popup icon.
                <br/>
                @default 'auto'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.ForcePopupIcon(System.Object)">
            <summary>
                Force the visibility display of the popup icon.
                <br/>
                @default 'auto'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.fullWidth">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.FullWidth(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.getLimitTagsTextDelegate">
            <summary>
                The label to display when the tags are truncated (`limitTags`).
                <br/>
                <br/>
                <br/>
                @param {number} more The number of truncated tags.
                <br/>
                @returns {ReactNode}
                <br/>
                @default (more) =&gt; `+${more}`
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.GetLimitTagsText(ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.getLimitTagsTextDelegate)">
            <summary>
                The label to display when the tags are truncated (`limitTags`).
                <br/>
                <br/>
                <br/>
                @param {number} more The number of truncated tags.
                <br/>
                @returns {ReactNode}
                <br/>
                @default (more) =&gt; `+${more}`
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.loading">
            <summary>
                The component used to render the listbox.
                <br/>
                @default 'ul'
                <br/>
                @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
            <summary>
                Props applied to the Listbox element.
                <br/>
                @deprecated Use `slotProps.listbox` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
            <summary>
                If `true`, the component is in a loading state.
                <br/>
                This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.Loading(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is in a loading state.
                <br/>
                This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.loadingText">
            <summary>
                Text to display when in a loading state.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Loading…'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.LoadingText(ReactWithDotNet.Element)">
            <summary>
                Text to display when in a loading state.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Loading…'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.limitTags">
            <summary>
                The maximum number of tags that will be visible when not focused.
                <br/>
                Set `-1` to disable the limit.
                <br/>
                @default -1
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.LimitTags(System.Nullable{System.Double})">
            <summary>
                The maximum number of tags that will be visible when not focused.
                <br/>
                Set `-1` to disable the limit.
                <br/>
                @default -1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.noOptionsText">
            <summary>
                Text to display when there are no options.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'No options'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.NoOptionsText(ReactWithDotNet.Element)">
            <summary>
                Text to display when there are no options.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'No options'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.openText">
            <summary>
                Override the default text for the *open popup* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Open'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.OpenText(System.String)">
            <summary>
                Override the default text for the *open popup* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
                <br/>
                @default 'Open'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.popupIcon">
            <summary>
                The component used to render the body of the popup.
                <br/>
                @default Paper
                <br/>
                @deprecated Use `slots.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
            <summary>
                The component used to position the popup.
                <br/>
                @default Popper
                <br/>
                @deprecated Use `slots.popper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
            <summary>
                The icon to display in place of the default popup icon.
                <br/>
                @default &lt;ArrowDropDownIcon /&gt;
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.PopupIcon(ReactWithDotNet.Element)">
            <summary>
                The icon to display in place of the default popup icon.
                <br/>
                @default &lt;ArrowDropDownIcon /&gt;
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.readOnly">
            <summary>
                If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.ReadOnly(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.size">
            <summary>
                Render the option, use `getOptionLabel` by default.
                <br/>
                <br/>
                <br/>
                @param {object} props The props to apply on the li element.
                <br/>
                @param {Value} option The option to render.
                <br/>
                @param {object} state The state of each option.
                <br/>
                @param {object} ownerState The state of the Autocomplete component.
                <br/>
                @returns {ReactNode}
            </summary>
            <summary>
                Render the selected value.
                <br/>
                <br/>
                <br/>
                @param {Value[]} value The `value` provided to the component.
                <br/>
                @param {function} getTagProps A tag props getter.
                <br/>
                @param {object} ownerState The state of the Autocomplete component.
                <br/>
                @returns {ReactNode}
            </summary>
            <summary>
                The size of the component.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.Size(System.String)">
            <summary>
                The size of the component.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.centerRipple">
            <summary>
                If `true`, the ripples are centered.
                <br/>
                They won't start at the cursor interaction position.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.CenterRipple(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the ripples are centered.
                <br/>
                They won't start at the cursor interaction position.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.Disabled(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.disableRipple">
            <summary>
                If `true`, the ripple effect is disabled.
                <br/>
                <br/>
                <br/>
                ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
                <br/>
                to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.DisableRipple(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the ripple effect is disabled.
                <br/>
                <br/>
                <br/>
                ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
                <br/>
                to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.disableTouchRipple">
            <summary>
                If `true`, the touch ripple effect is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.DisableTouchRipple(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the touch ripple effect is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.focusRipple">
            <summary>
                If `true`, the base button will have a keyboard focus ripple.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.FocusRipple(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the base button will have a keyboard focus ripple.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.focusVisibleClassName">
            <summary>
                This prop can help identify which element has keyboard focus.
                <br/>
                The class name will be applied when the element gains the focus through keyboard interaction.
                <br/>
                It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
                <br/>
                The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
                <br/>
                A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
                <br/>
                if needed.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.FocusVisibleClassName(System.String)">
            <summary>
                This prop can help identify which element has keyboard focus.
                <br/>
                The class name will be applied when the element gains the focus through keyboard interaction.
                <br/>
                It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
                <br/>
                The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
                <br/>
                A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
                <br/>
                if needed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.TouchRippleProps">
            <summary>
                Props applied to the `TouchRipple` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Card.raised">
            <summary>
                If `true`, the card will use raised styling.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Card.Raised(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the card will use raised styling.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.disableSpacing">
            <summary>
                If `true`, the actions do not have additional margin.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.DisableSpacing(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the actions do not have additional margin.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardContent.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardContent.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.image">
            <summary>
                Image to be displayed as a background image.
                <br/>
                Either `image` or `src` prop must be specified.
                <br/>
                Note that caller must specify height otherwise the image will not be visible.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.Image(System.String)">
            <summary>
                Image to be displayed as a background image.
                <br/>
                Either `image` or `src` prop must be specified.
                <br/>
                Note that caller must specify height otherwise the image will not be visible.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.src">
            <summary>
                An alias for `image` property.
                <br/>
                Available only with media components.
                <br/>
                Media components: `video`, `audio`, `picture`, `iframe`, `img`.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.Src(System.String)">
            <summary>
                An alias for `image` property.
                <br/>
                Available only with media components.
                <br/>
                Media components: `video`, `audio`, `picture`, `iframe`, `img`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Chip.color">
            <summary>
                'default'| 'primary'| 'secondary'| 'error'| 'info'| 'success'| 'warning'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Chip.variant">
            <summary>
                'filled' | 'outlined'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.Color(System.String)">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.disableShrink">
            <summary>
                If `true`, the shrink animation is disabled.
                <br/>
                This only works if variant is `indeterminate`.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.DisableShrink(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the shrink animation is disabled.
                <br/>
                This only works if variant is `indeterminate`.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.size">
            <summary>
                The size of the component.
                <br/>
                If using a number, the pixel unit is assumed.
                <br/>
                If using a string, you need to provide the CSS unit, for example '3rem'.
                <br/>
                @default 40
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.Size(System.Object)">
            <summary>
                The size of the component.
                <br/>
                If using a number, the pixel unit is assumed.
                <br/>
                If using a string, you need to provide the CSS unit, for example '3rem'.
                <br/>
                @default 40
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.thickness">
            <summary>
                The thickness of the circle.
                <br/>
                @default 3.6
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.Thickness(System.Nullable{System.Double})">
            <summary>
                The thickness of the circle.
                <br/>
                @default 3.6
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.value">
            <summary>
                The value of the progress indicator for the determinate variant.
                <br/>
                Value between 0 and 100.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.Value(System.Nullable{System.Double})">
            <summary>
                The value of the progress indicator for the determinate variant.
                <br/>
                Value between 0 and 100.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.variant">
            <summary>
                The variant to use.
                <br/>
                Use indeterminate when there is no progress value.
                <br/>
                @default 'indeterminate'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.Variant(System.String)">
            <summary>
                The variant to use.
                <br/>
                Use indeterminate when there is no progress value.
                <br/>
                @default 'indeterminate'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Dialog.maxWidth">
            <summary>
            'xs' | 'sm' | 'md' | 'lg' | 'xl' | false | custom string
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Dialog.scroll">
            <summary>
            'body' | 'paper'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.absolute">
            <summary>
                Absolutely position the element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.Absolute(System.Nullable{System.Boolean})">
            <summary>
                Absolutely position the element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.flexItem">
            <summary>
                If `true`, a vertical divider will have the correct height when used in flex container.
                <br/>
                (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.FlexItem(System.Nullable{System.Boolean})">
            <summary>
                If `true`, a vertical divider will have the correct height when used in flex container.
                <br/>
                (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.light">
            <summary>
                If `true`, the divider will have a lighter color.
                <br/>
                @default false
                <br/>
                @deprecated Use &lt;Divider sx={{ opacity: 0.6 }} /&gt; (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.Light(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the divider will have a lighter color.
                <br/>
                @default false
                <br/>
                @deprecated Use &lt;Divider sx={{ opacity: 0.6 }} /&gt; (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.orientation">
            <summary>
                The component orientation.
                <br/>
                @default 'horizontal'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.Orientation(System.String)">
            <summary>
                The component orientation.
                <br/>
                @default 'horizontal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.textAlign">
            <summary>
                The text alignment.
                <br/>
                @default 'center'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.TextAlign(System.String)">
            <summary>
                The text alignment.
                <br/>
                @default 'center'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.variant">
            <summary>
                The variant to use.
                <br/>
                @default 'fullWidth'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.Variant(System.String)">
            <summary>
                The variant to use.
                <br/>
                @default 'fullWidth'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.id">
            <summary>
            Defines the justification of items along the horizontal axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.justifyContent">
            <summary>
            Defines the justification of items along the horizontal axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.alignItems">
            <summary>
            Defines the alignment of items along the vertical axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.alignContent">
            <summary>
            Defines the alignment of content within the container when there's extra space.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.directionReverse">
            <summary>
            Reverses the direction of the flex items.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.zeroMinWidth">
            <summary>
            If true, the item will grow to fill available space.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.item">
            <summary>
            Defines if the component is an item inside a container.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.columns">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.columnSpacing">
            <summary>
            	Defines the horizontal space between the type item components. It overrides the value of the spacing prop.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.container">
            <summary>
            	If true, the component will have the flex container behavior. You should be wrapping items with a container.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.direction">
            <summary>
            	Defines the flex-direction style property. It is applied for all screen sizes.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.offset">
            <summary>
            	Defines the offset value for the type item components.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.rowSpacing">
            <summary>
            	Defines the vertical space between the type item components. It overrides the value of the spacing prop.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.size">
            <summary>
            	Defines the size of the the type item components.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.spacing">
            <summary>
            	Defines the space between the type item components. It can only be used on a type container component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.wrap">
            <summary>
            	'nowrap' | 'wrap-reverse' | 'wrap'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Grid.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'default'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.Color(System.String)">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'default'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.disableFocusRipple">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.DisableFocusRipple(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.edge">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.Edge(System.Object)">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.loading">
            <summary>
                If `true`, the loading indicator is visible and the button is disabled.
                <br/>
                If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
                <br/>
                @default null
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.Loading(System.Object)">
            <summary>
                If `true`, the loading indicator is visible and the button is disabled.
                <br/>
                If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
                <br/>
                @default null
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.loadingIndicator">
            <summary>
                Element placed before the children if the button is in loading state.
                <br/>
                The node should contain an element with `role="progressbar"` with an accessible name.
                <br/>
                By default, it renders a `CircularProgress` that is labeled by the button itself.
                <br/>
                @default &lt;CircularProgress color="inherit" size={16} /&gt;
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.LoadingIndicator(ReactWithDotNet.Element)">
            <summary>
                Element placed before the children if the button is in loading state.
                <br/>
                The node should contain an element with `role="progressbar"` with an accessible name.
                <br/>
                By default, it renders a `CircularProgress` that is labeled by the button itself.
                <br/>
                @default &lt;CircularProgress color="inherit" size={16} /&gt;
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.size">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense button styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.Size(System.String)">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense button styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Switch.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Switch.Color(System.String)">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Switch.size">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense switch styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Switch.Size(System.String)">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense switch styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.autoComplete">
            <summary>
                This prop helps users to fill forms faster, especially on mobile devices.
                <br/>
                The name can be confusing, as it's more like an autofill.
                <br/>
                You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.AutoComplete(System.String)">
            <summary>
                This prop helps users to fill forms faster, especially on mobile devices.
                <br/>
                The name can be confusing, as it's more like an autofill.
                <br/>
                You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.autoFocus">
            <summary>
                If `true`, the `input` element is focused during the first mount.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.AutoFocus(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the `input` element is focused during the first mount.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Color(System.String)">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.defaultValue">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.DefaultValue(System.String)">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Disabled(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.error">
            <summary>
                If `true`, the label is displayed in an error state.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Error(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the label is displayed in an error state.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.FormHelperTextProps">
            <summary>
                Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
                <br/>
                @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.fullWidth">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.FullWidth(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.helperText">
            <summary>
                The helper text content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.HelperText(ReactWithDotNet.Element)">
            <summary>
                The helper text content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.id">
            <summary>
                The id of the `input` element.
                <br/>
                Use this prop to make `label` and `helperText` accessible for screen readers.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Id(System.String)">
            <summary>
                The id of the `input` element.
                <br/>
                Use this prop to make `label` and `helperText` accessible for screen readers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.InputLabelProps">
            <summary>
                Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
                <br/>
                Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
                <br/>
                @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.inputProps">
            <summary>
                [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
                <br/>
                @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.label">
            <summary>
                The label content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Label(ReactWithDotNet.Element)">
            <summary>
                The label content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.multiline">
            <summary>
                If `true`, a `textarea` element is rendered instead of an input.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Multiline(System.Nullable{System.Boolean})">
            <summary>
                If `true`, a `textarea` element is rendered instead of an input.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.name">
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Name(System.String)">
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.placeholder">
            <summary>
                The short hint displayed in the `input` before the user enters a value.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Placeholder(System.String)">
            <summary>
                The short hint displayed in the `input` before the user enters a value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.required">
            <summary>
                If `true`, the label is displayed as required and the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Required(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the label is displayed as required and the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.rows">
            <summary>
                Number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Rows(System.Nullable{System.Int32})">
            <summary>
                Number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.maxRows">
            <summary>
                Maximum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.MaxRows(System.Nullable{System.Int32})">
            <summary>
                Maximum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.minRows">
            <summary>
                Minimum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.MinRows(System.Nullable{System.Int32})">
            <summary>
                Minimum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.select">
            <summary>
                Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
                <br/>
                If this option is set you must pass the options of the select as children.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Select(System.Nullable{System.Boolean})">
            <summary>
                Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
                <br/>
                If this option is set you must pass the options of the select as children.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.SelectProps">
            <summary>
                Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
                <br/>
                @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.size">
            <summary>
                The size of the component.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Size(System.String)">
            <summary>
                The size of the component.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.type">
            <summary>
                Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Type(System.String)">
            <summary>
                Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.value">
            <summary>
                The value of the `input` element, required for a controlled component.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.Value(System.String)">
            <summary>
                The value of the `input` element, required for a controlled component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.elevation">
            <summary>
                Shadow depth, corresponds to `dp` in the spec.
                <br/>
                It accepts values between 0 and 24 inclusive.
                <br/>
                @default 1
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.Elevation(System.Nullable{System.Double})">
            <summary>
                Shadow depth, corresponds to `dp` in the spec.
                <br/>
                It accepts values between 0 and 24 inclusive.
                <br/>
                @default 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.square">
            <summary>
                If `true`, rounded corners are disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.Square(System.Nullable{System.Boolean})">
            <summary>
                If `true`, rounded corners are disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.variant">
            <summary>
                The variant to use.
                <br/>
                @default 'elevation'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.Variant(System.String)">
            <summary>
                The variant to use.
                <br/>
                @default 'elevation'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.ariaLabel">
            <summary>
                The label of the slider.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.AriaLabel(System.String)">
            <summary>
                The label of the slider.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.ariaLabelledby">
            <summary>
                The id of the element containing a label for the slider.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.AriaLabelledby(System.String)">
            <summary>
                The id of the element containing a label for the slider.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.ariaValuetext">
            <summary>
                A string value that provides a user-friendly name for the current value of the slider.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.AriaValuetext(System.String)">
            <summary>
                A string value that provides a user-friendly name for the current value of the slider.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Color(System.String)">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.components">
            <summary>
                The components used for each slot inside.
                <br/>
                <br/>
                <br/>
                @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.componentsProps">
            <summary>
                The extra props for the slot components.
                <br/>
                You can override the existing props or add new ones.
                <br/>
                <br/>
                <br/>
                @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.defaultValue">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.DefaultValue(System.Object)">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Disabled(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.disableSwap">
            <summary>
                If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.DisableSwap(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.marks">
            <summary>
                Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
                <br/>
                This is important for screen reader users.
                <br/>
                @param {number} index The thumb label's index to format.
                <br/>
                @returns {string}
            </summary>
            <summary>
                Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
                <br/>
                This is important for screen reader users.
                <br/>
                @param {number} value The thumb label's value to format.
                <br/>
                @param {number} index The thumb label's index to format.
                <br/>
                @returns {string}
            </summary>
            <summary>
                Marks indicate predetermined values to which the user can move the slider.
                <br/>
                If `true` the marks are spaced according the value of the `step` prop.
                <br/>
                If an array, it should contain objects with `value` and an optional `label` keys.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Marks(System.Object)">
            <summary>
                Marks indicate predetermined values to which the user can move the slider.
                <br/>
                If `true` the marks are spaced according the value of the `step` prop.
                <br/>
                If an array, it should contain objects with `value` and an optional `label` keys.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.max">
            <summary>
                The maximum allowed value of the slider.
                <br/>
                Should not be equal to min.
                <br/>
                @default 100
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Max(System.Nullable{System.Double})">
            <summary>
                The maximum allowed value of the slider.
                <br/>
                Should not be equal to min.
                <br/>
                @default 100
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.min">
            <summary>
                The minimum allowed value of the slider.
                <br/>
                Should not be equal to max.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Min(System.Nullable{System.Double})">
            <summary>
                The minimum allowed value of the slider.
                <br/>
                Should not be equal to max.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.name">
            <summary>
                Name attribute of the hidden `input` element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Name(System.String)">
            <summary>
                Name attribute of the hidden `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.onChangeCommitted">
            <summary>
                Callback function that is fired when the slider's value changed.
                <br/>
                <br/>
                <br/>
                @param {Event} event The event source of the callback.
                <br/>
                You can pull out the new value by accessing `event.target.value` (any).
                <br/>
                **Warning**: This is a generic event not a change event.
                <br/>
                @param {Value} value The new value.
                <br/>
                @param {number} activeThumb Index of the currently moved thumb.
            </summary>
            <summary>
                Callback function that is fired when the `mouseup` is triggered.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
                <br/>
                @param {Value} value The new value.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.OnChangeCommitted(ReactWithDotNet.MouseEvent)">
            <summary>
                Callback function that is fired when the `mouseup` is triggered.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
                <br/>
                @param {Value} value The new value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.orientation">
            <summary>
                The component orientation.
                <br/>
                @default 'horizontal'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Orientation(System.String)">
            <summary>
                The component orientation.
                <br/>
                @default 'horizontal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.shiftStep">
            <summary>
                A transformation function, to change the scale of the slider.
                <br/>
                @param {any} x
                <br/>
                @returns {any}
                <br/>
                @default function Identity(x) {
                <br/>
                return x;
                <br/>
                }
            </summary>
            <summary>
                The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
                <br/>
                @default 10
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.ShiftStep(System.Nullable{System.Double})">
            <summary>
                The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
                <br/>
                @default 10
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.size">
            <summary>
                The size of the slider.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Size(System.String)">
            <summary>
                The size of the slider.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.slotProps">
            <summary>
                The props used for each slot inside the Slider.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.slots">
            <summary>
                The components used for each slot inside the Slider.
                <br/>
                Either a string to use a HTML element or a component.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.step">
            <summary>
                The granularity with which the slider can step through values. (A "discrete" slider.)
                <br/>
                The `min` prop serves as the origin for the valid values.
                <br/>
                We recommend (max - min) to be evenly divisible by the step.
                <br/>
                <br/>
                <br/>
                When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
                <br/>
                @default 1
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Step(System.Object)">
            <summary>
                The granularity with which the slider can step through values. (A "discrete" slider.)
                <br/>
                The `min` prop serves as the origin for the valid values.
                <br/>
                We recommend (max - min) to be evenly divisible by the step.
                <br/>
                <br/>
                <br/>
                When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
                <br/>
                @default 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.tabIndex">
            <summary>
                Tab index attribute of the hidden `input` element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.TabIndex(System.Nullable{System.Double})">
            <summary>
                Tab index attribute of the hidden `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.track">
            <summary>
                The track presentation:
                <br/>
                <br/>
                <br/>
                - `normal` the track will render a bar representing the slider value.
                <br/>
                - `inverted` the track will render a bar representing the remaining slider value.
                <br/>
                - `false` the track will render without a bar.
                <br/>
                @default 'normal'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Track(System.Object)">
            <summary>
                The track presentation:
                <br/>
                <br/>
                <br/>
                - `normal` the track will render a bar representing the slider value.
                <br/>
                - `inverted` the track will render a bar representing the remaining slider value.
                <br/>
                - `false` the track will render without a bar.
                <br/>
                @default 'normal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.value">
            <summary>
                The value of the slider.
                <br/>
                For ranged sliders, provide an array with two values.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.Value(System.Object)">
            <summary>
                The value of the slider.
                <br/>
                For ranged sliders, provide an array with two values.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.valueLabelDisplay">
            <summary>
                Controls when the value label is displayed:
                <br/>
                <br/>
                <br/>
                - `auto` the value label will display when the thumb is hovered or focused.
                <br/>
                - `on` will display persistently.
                <br/>
                - `off` will never display.
                <br/>
                @default 'off'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.ValueLabelDisplay(System.String)">
            <summary>
                Controls when the value label is displayed:
                <br/>
                <br/>
                <br/>
                - `auto` the value label will display when the thumb is hovered or focused.
                <br/>
                - `on` will display persistently.
                <br/>
                - `off` will never display.
                <br/>
                @default 'off'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.valueLabelFormat">
            <summary>
                The format function the value label's value.
                <br/>
                <br/>
                <br/>
                When a function is provided, it should have the following signature:
                <br/>
                <br/>
                <br/>
                - {number} value The value label's value to format
                <br/>
                - {number} index The value label's index to format
                <br/>
                @param {any} x
                <br/>
                @returns {any}
                <br/>
                @default function Identity(x) {
                <br/>
                return x;
                <br/>
                }
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.ValueLabelFormat(ReactWithDotNet.Element)">
            <summary>
                The format function the value label's value.
                <br/>
                <br/>
                <br/>
                When a function is provided, it should have the following signature:
                <br/>
                <br/>
                <br/>
                - {number} value The value label's value to format
                <br/>
                - {number} index The value label's index to format
                <br/>
                @param {any} x
                <br/>
                @returns {any}
                <br/>
                @default function Identity(x) {
                <br/>
                return x;
                <br/>
                }
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.checked">
            <summary>
                If `true`, the component is checked.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.Checked(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is checked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.defaultChecked">
            <summary>
                The default checked state. Use when the component is not controlled.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.DefaultChecked(System.Nullable{System.Boolean})">
            <summary>
                The default checked state. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.disableFocusRipple">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.DisableFocusRipple(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.edge">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.Edge(System.Object)">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.id">
            <summary>
                The id of the `input` element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.Id(System.String)">
            <summary>
                The id of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.inputProps">
            <summary>
                [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.name">
            <summary>
                Pass a ref to the `input` element.
            </summary>
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.Name(System.String)">
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.onChange">
            <summary>
                Callback fired when the state is changed.
                <br/>
                <br/>
                <br/>
                @param {React.ChangeEvent&lt;HTMLInputElement&gt;} event The event source of the callback.
                <br/>
                You can pull out the new value by accessing `event.target.value` (string).
                <br/>
                You can pull out the new checked state by accessing `event.target.checked` (boolean).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.required">
            <summary>
                If `true`, the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.Required(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.value">
            <summary>
                The value of the component. The DOM API casts this to a string.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.Value(System.String)">
            <summary>
                The value of the component. The DOM API casts this to a string.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.maxRows">
            <summary>
            Maximum number of rows to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.minRows">
            <summary>
             Minimum number of rows to display.
            <br/>
            Default: 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.defaultValue">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.placeholder">
            <summary>
                The short hint displayed in the `input` before the user enters a value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextareaAutosize.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.arrow">
            <summary>
                If `true`, adds an arrow to the tooltip.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.Arrow(System.Nullable{System.Boolean})">
            <summary>
                If `true`, adds an arrow to the tooltip.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.components">
            <summary>
                The components used for each slot inside.
                <br/>
                <br/>
                <br/>
                @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.componentsProps">
            <summary>
                The extra props for the slot components.
                <br/>
                You can override the existing props or add new ones.
                <br/>
                <br/>
                <br/>
                @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.describeChild">
            <summary>
                Set to `true` if the `title` acts as an accessible description.
                <br/>
                By default the `title` acts as an accessible label for the child.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.DescribeChild(System.Nullable{System.Boolean})">
            <summary>
                Set to `true` if the `title` acts as an accessible description.
                <br/>
                By default the `title` acts as an accessible label for the child.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableFocusListener">
            <summary>
                Do not respond to focus-visible events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.DisableFocusListener(System.Nullable{System.Boolean})">
            <summary>
                Do not respond to focus-visible events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableHoverListener">
            <summary>
                Do not respond to hover events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.DisableHoverListener(System.Nullable{System.Boolean})">
            <summary>
                Do not respond to hover events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableInteractive">
            <summary>
                Makes a tooltip not interactive, i.e. it will close when the user
                <br/>
                hovers over the tooltip before the `leaveDelay` is expired.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.DisableInteractive(System.Nullable{System.Boolean})">
            <summary>
                Makes a tooltip not interactive, i.e. it will close when the user
                <br/>
                hovers over the tooltip before the `leaveDelay` is expired.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableTouchListener">
            <summary>
                Do not respond to long press touch events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.DisableTouchListener(System.Nullable{System.Boolean})">
            <summary>
                Do not respond to long press touch events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.enterDelay">
            <summary>
                The number of milliseconds to wait before showing the tooltip.
                <br/>
                This prop won't impact the enter touch delay (`enterTouchDelay`).
                <br/>
                @default 100
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.EnterDelay(System.Nullable{System.Double})">
            <summary>
                The number of milliseconds to wait before showing the tooltip.
                <br/>
                This prop won't impact the enter touch delay (`enterTouchDelay`).
                <br/>
                @default 100
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.enterNextDelay">
            <summary>
                The number of milliseconds to wait before showing the tooltip when one was already recently opened.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.EnterNextDelay(System.Nullable{System.Double})">
            <summary>
                The number of milliseconds to wait before showing the tooltip when one was already recently opened.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.enterTouchDelay">
            <summary>
                The number of milliseconds a user must touch the element before showing the tooltip.
                <br/>
                @default 700
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.EnterTouchDelay(System.Nullable{System.Double})">
            <summary>
                The number of milliseconds a user must touch the element before showing the tooltip.
                <br/>
                @default 700
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.followCursor">
            <summary>
                If `true`, the tooltip follow the cursor over the wrapped element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.FollowCursor(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the tooltip follow the cursor over the wrapped element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.id">
            <summary>
                This prop is used to help implement the accessibility logic.
                <br/>
                If you don't provide this prop. It falls back to a randomly generated id.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.Id(System.String)">
            <summary>
                This prop is used to help implement the accessibility logic.
                <br/>
                If you don't provide this prop. It falls back to a randomly generated id.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.leaveDelay">
            <summary>
                The number of milliseconds to wait before hiding the tooltip.
                <br/>
                This prop won't impact the leave touch delay (`leaveTouchDelay`).
                <br/>
                @default 0
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.LeaveDelay(System.Nullable{System.Double})">
            <summary>
                The number of milliseconds to wait before hiding the tooltip.
                <br/>
                This prop won't impact the leave touch delay (`leaveTouchDelay`).
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.leaveTouchDelay">
            <summary>
                The number of milliseconds after the user stops touching an element before hiding the tooltip.
                <br/>
                @default 1500
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.LeaveTouchDelay(System.Nullable{System.Double})">
            <summary>
                The number of milliseconds after the user stops touching an element before hiding the tooltip.
                <br/>
                @default 1500
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.onClose">
            <summary>
                Callback fired when the component requests to be closed.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.onOpen">
            <summary>
                Callback fired when the component requests to be open.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.open">
            <summary>
                If `true`, the component is shown.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.Open(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the component is shown.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.placement">
            <summary>
                Tooltip placement.
                <br/>
                @default 'bottom'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.Placement(System.String)">
            <summary>
                Tooltip placement.
                <br/>
                @default 'bottom'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.PopperProps">
            <summary>
                Props applied to the [`Popper`](https://mui.com/material-ui/api/popper/) element.
                <br/>
                @deprecated use the `slotProps.popper` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.title">
            <summary>
                Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.Title(ReactWithDotNet.Element)">
            <summary>
                Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.id">
            <summary>
            Defines the justification of items along the horizontal axis.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.align">
            <summary>
                Set the text-align on the component.
                <br/>
                @default 'inherit'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.Align(System.String)">
            <summary>
                Set the text-align on the component.
                <br/>
                @default 'inherit'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.Color(System.String)">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.gutterBottom">
            <summary>
                // to work with v5 color prop type which allows any string
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.GutterBottom(System.Nullable{System.Boolean})">
            <summary>
                // to work with v5 color prop type which allows any string
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.noWrap">
            <summary>
                If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
                <br/>
                <br/>
                <br/>
                Note that text overflow can only happen with block or inline-block level elements
                <br/>
                (the element needs to have a width in order to overflow).
                <br/>
                @default false
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.NoWrap(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
                <br/>
                <br/>
                <br/>
                Note that text overflow can only happen with block or inline-block level elements
                <br/>
                (the element needs to have a width in order to overflow).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.paragraph">
            <summary>
                If `true`, the element will be a paragraph element.
                <br/>
                @default false
                <br/>
                @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.Paragraph(System.Nullable{System.Boolean})">
            <summary>
                If `true`, the element will be a paragraph element.
                <br/>
                @default false
                <br/>
                @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.variant">
            <summary>
                Applies the theme typography styles.
                <br/>
                @default 'body1'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.Variant(System.String)">
            <summary>
                Applies the theme typography styles.
                <br/>
                @default 'body1'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.variantMapping">
            <summary>
                The component maps the variant prop to a range of different HTML element types.
                <br/>
                For instance, subtitle1 to `&lt;h6&gt;`.
                <br/>
                If you wish to change that mapping, you can provide your own.
                <br/>
                Alternatively, you can use the `component` prop.
                <br/>
                @default {
                <br/>
                h1: 'h1',
                <br/>
                h2: 'h2',
                <br/>
                h3: 'h3',
                <br/>
                h4: 'h4',
                <br/>
                h5: 'h5',
                <br/>
                h6: 'h6',
                <br/>
                subtitle1: 'h6',
                <br/>
                subtitle2: 'h6',
                <br/>
                body1: 'p',
                <br/>
                body2: 'p',
                <br/>
                inherit: 'p',
                <br/>
                }
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.delay">
            <summary>
            Delay between keystrokes to wait before sending a query.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.suggestions">
            <summary>
                An array of suggestions to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.onChange">
            <summary>
                Callback to invoke when autocomplete value changes.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.completeMethod">
            <summary>
                Callback to invoke to search for suggestions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.field">
            <summary>
                Field of a suggested object to resolve and display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.forceSelection">
            <summary>
                When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting
                values from the suggestions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.dropdown">
            <summary>
            Displays a button next to the input field when enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.icon">
            <summary>
                Defines the icon to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.image">
            <summary>
                Defines the image to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.imageAlt">
            <summary>
                It specifies an alternate text for an image, if the image cannot be displayed.
                <br/>
                @defaultValue avatar
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.imageFallback">
            <summary>
                Defines a fallback image or URL if the main image fails to load. If "default" will fallback to label then icon.
                <br/>
                @defaultValue default
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.label">
            <summary>
                Defines the text to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.shape">
            <summary>
                Shape of the element.
                <br/>
                @defaultValue square
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.size">
            <summary>
                Size of the element.
                <br/>
                @defaultValue normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.template">
            <summary>
                Template of the content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.ptOptions">
            <summary>
                Used to configure passthrough(pt) options of the component.
                <br/>
                @type {PassThroughOptions}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.unstyled">
            <summary>
                When enabled, it removes component related styles in the core.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.BlockUI.blocked">
            <summary>
            Controls the blocked state.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.label">
            <summary>
                Text of the button.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.iconPos">
            <summary>
            Position of the icon, valid values are "left", "right", "top" and "bottom".
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.loading">
             <summary>
            Display loading icon of the button
             </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.loadingIcon">
            <summary>
            Name of the loading icon or JSX.Element for loading icon.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.visible">
            <summary>
            Specifies the visibility of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.modal">
            <summary>
            Defines if background should be blocked when dialog is displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.footer">
            <summary>
            Footer content of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.header">
            <summary>
            Title content of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.closable">
            <summary>
            Adds a close icon to the header to hide the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.onShow">
            <summary>
            Callback to invoke when dialog is showed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.onHide">
            <summary>
            Callback to invoke when dialog is hidden (Required).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.value">
            <summary>
            Value of the checkbox.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.checked">
            <summary>
               Specifies whether a checkbox should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.disabled">
            <summary>
            When present, it specifies that the element value cannot be altered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.onChange">
            <summary>
            Callback to invoke on value change
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dropdown.filterBy">
            <summary>
            When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
            <para>Default: label</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dropdown.showClear">
            <summary>
            When enabled, a clear icon is displayed to clear the value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dropdown.filter">
            <summary>
            When specified, displays an input field to filter the items on keyup.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputMask.mask">
            <summary>
                Mask pattern.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputMask.placeholder">
            <summary>
                Advisory information to display on input.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputMask.maxlength">
            <summary>
                Maximum number of character allows in the input field.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputSwitch.checked">
            <summary>
                Specifies whether a inputswitch should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputSwitch.disabled">
            <summary>
                When present, it specifies that the component should be disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputSwitch.onChange">
            <summary>
                Callback to invoke on value change
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputText.valueBindDebounceHandler">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputText.valueBindDebounceTimeout">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputText.keyfilter">
            <summary>
            Format definition of the keys to block.
            <para>Default: null</para>
            <para>Type: string/regex</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputTextarea.autoResize">
             <summary>
            When present, height of textarea changes as being typed.
             <para>Default: false</para>
             </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.filter">
            <summary>
                When specified, displays a filter input at header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.filterPlaceholder">
            <summary>
            Placeholder text to show when filter input is empty.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.listStyle">
            <summary>
                Inline style of inner list element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.optionLabel">
            <summary>
                Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.options">
            <summary>
                An array of objects to display as the available options.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.optionValue">
            <summary>
                Name of the value field of an option when arbitrary objects are used as options instead of SelectItems.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.value">
            <summary>
                Selected value to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Message.text">
            <summary>
                Text of the message.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Message.severity">
            <summary>
            Severity level of the message.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.collapsed">
            <summary>
                	Defines the initial state of panel content, supports one or two-way binding as well.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.toggleable">
            <summary>
                Defines if content of panel can be expanded and collapsed.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.header">
            <summary>
            Custom header template of the panel.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.headerTemplate">
            <summary>
               Header template of the panel to customize more.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.onToggle">
            <summary>
                Callback to invoke when a tab gets expanded.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ProgressSpinner.strokeWidth">
            <summary>
                Width of the circle stroke.
                <para>default: 2</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ProgressSpinner.fill">
            <summary>
               Color for the background of the circle.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ProgressSpinner.animationDuration">
            <summary>
                Duration of the rotate animation.
                <para>default: 2s</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.value">
            <summary>
            Value of the radiobutton.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.checked">
            <summary>
                Specifies whether a radiobutton should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.disabled">
            <summary>
            When present, it specifies that the element value cannot be altered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.onChange">
            <summary>
            Callback to invoke on radio button click.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Divider.layout">
            <summary>
                Specifies the orientation, valid values are "horizontal" and "vertical".
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Divider.align">
            <summary>
                Alignment of the content, options are "left", "center", "right" for horizontal layout and "top", "center", "bottom" for vertical.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Divider.type">
            <summary>
            Border style type, default is "solid" and other options are "dashed" and "dotted".
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ScrollPanel">
            <summary>
                ScrollPanel is defined using dimensions for the scrollable viewport.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider">
            <summary>
                Slider is a component to provide input using dragging of a handle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.value">
            <summary>
                Value of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.valueBind">
            <summary>
                Value of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.min">
            <summary>
                Mininum boundary value.
                <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.max">
            <summary>
                Maximum boundary value.
                <para>Default: 100</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.step">
            <summary>
                Step factor to increment/decrement the value.
                <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.orientation">
            <summary>
                Orientation of the slider, valid values are horizontal and vertical.
                <para>Default: horizontal</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.onChange">
            <summary>
            Callback to invoke on value change via slide.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.onSlideEnd">
            <summary>
            Callback to invoke when slide ends.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.layout">
            <summary>
                Orientation of the panels, valid values are "horizontal" and "vertical".
                <br/>
                @defaultValue horizontal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.gutterSize">
            <summary>
                Size of the divider in pixels.
                <br/>
                @defaultValue 4
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.stateKey">
            <summary>
                Storage identifier of a stateful Splitter.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.stateStorage">
            <summary>
                Defines where a stateful splitter keeps its state, valid values are "session" for sessionStorage and "local" for localStorage.
                <br/>
                @defaultValue session
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SplitterPanel.size">
            <summary>
                Size of the element relative to 100%.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SplitterPanel.minSize">
            <summary>
                Minimum size of the element relative to 100%.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.header">
            <summary>
                Orientation of tab headers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.headerTemplate">
            <summary>
                Header template of the tab to customize more.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.leftIcon">
            <summary>
                Icons can be placed at left of a header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.rightIcon">
            <summary>
                Icons can be placed at right of a header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.prevButton">
            <summary>
                Previous button of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.nextButton">
            <summary>
                Next button of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.closeIcon">
            <summary>
                Close button of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.disabled">
            <summary>
                Whether the tab is disabled.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.closable">
            <summary>
                Defines if tab can be removed.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.headerStyle">
            <summary>
                Inline style of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.headerClassName">
            <summary>
                Style class of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.contentStyle">
            <summary>
                Inline style of the tab content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.contentClassName">
            <summary>
                Style class of the tab content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.activeIndex">
            <summary>
                Active index of the TabView.
                <br/>
                @defaultValue 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.panelContainerClassName">
            <summary>
                Style class of the panels container of the tabview.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.panelContainerStyle">
            <summary>
                Inline style of the panels container of the tabview.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.renderActiveOnly">
            <summary>
                Whether to render the contents of the selected tab or all tabs.
                <br/>
                @defaultValue true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.scrollable">
            <summary>
                When enabled displays buttons at each side of the tab headers to scroll the tab list.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.ptOptions">
            <summary>
                Used to configure passthrough(pt) options of the component.
                <br/>
                @type {PassThroughOptions}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.unstyled">
            <summary>
                When enabled, it removes component related styles in the core.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.onTabChange">
            <summary>
                Callback to invoke when an active tab is changed.
                <br/>
                @param {TabViewTabChangeEvent} event -  Custom tab change event.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.onTabClose">
            <summary>
                Callback to invoke when an active tab is closed.
                <br/>
                @param {TabViewTabCloseEvent} event - Custom tab close event.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.position">
            <summary>
            Position of the tooltip, valid values are right, left, top and bottom.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.target">
            <summary>
            Target element on global tooltip option.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.showDelay">
            <summary>
            Delay to show the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.updateDelay">
            <summary>
            	Delay to update the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.hideDelay">
            <summary>
            Delay to hide the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType">
            <summary>
                The tooltip position type
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.top">
            <summary>
                The top
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.bottom">
            <summary>
                The bottom
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.left">
            <summary>
                The left
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.right">
            <summary>
                The right
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipEventType">
            <summary>
                The tooltip event type
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipEventType.hover">
            <summary>
                The hover
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipEventType.focus">
            <summary>
                The focus
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions">
            <summary>
                The tooltip options
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.className">
            <summary>
                Style class of the tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.position">
            <summary>
                Position of the tooltip, valid values are right, left, top and bottom.
                <para>Default: right</para>
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.style">
            <summary>
                Style of the tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.my">
            <summary>
                Defines which position on the tooltip being positioned to align with the target element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.at">
            <summary>
                Defines which position on the target element to align the positioned tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.event">
            <summary>
                Event to show the tooltip, valid values are hover and focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.showEvent">
            <summary>
                Event to show the tooltip if the event property is empty.
                <para>Default mouseenter</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.hideEvent">
            <summary>
                Event to hide the tooltip if the event property is empty.
                <para>Default mouseleave</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.autoZIndex">
            <summary>
                Whether to automatically manage layering.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.baseZIndex">
            <summary>
                Base zIndex value to use in layering.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.mouseTrack">
            <summary>
                Whether the tooltip will follow the mouse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.mouseTrackTop">
            <summary>
                Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.mouseTrackLeft">
            <summary>
                Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.showDelay">
            <summary>
                Delay to show the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.updateDelay">
            <summary>
                Delay to update the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.hideDelay">
            <summary>
                Delay to hide the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.autoHide">
            <summary>
                Whether to hide tooltip when hovering over tooltip content.
            <para>Default true</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.disabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions" /> is disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.showOnDisabled">
            <summary>
                Gets or sets a value indicating whether [show on disabled].
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.value">
            <summary>
                Selected value to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filter">
            <summary>
                When specified, displays an input field to filter the items.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filterValue">
            <summary>
                When filtering is enabled, the value of input field.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filterPlaceholder">
            <summary>
                Placeholder text to show when filter input is empty.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filterBy">
            <summary>
                When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
                <para>Default: label</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.expandedKeys">
            <summary>
            An array of keys to represent the state of the tree expansion state in controlled mode.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.url">
            <summary>
            The url of a video or song to play
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.playing">
            <summary>
            Set to true or false to pause or play the media.
            <br/>
            Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.controls">
            <summary>
            Set to true or false to display native player controls.
            <br/>
            For Vimeo videos, hiding controls must be enabled by the video owner.
            <br/>
            Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.playsinline">
            <summary>
            Applies the playsinline attribute where supported
            <br/>
            Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.light">
            <summary>
            Set to true to show just the video thumbnail, which loads the full player on click
            <br/>
             Pass in an image URL to override the preview image
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.volume">
            <summary>
            Set the volume of the player, between 0 and 1
            <br/>
             null uses default volume on all players
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.muted">
            <summary>
            Mutes the player
            <br/>
             Only works if volume is set
            <br/>
             Default: False
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.playbackRate">
            <summary>
            Set the playback rate of the player
            <br/>
             Only supported by YouTube, Wistia, and file paths
            <br/>
             Default: 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.width">
            <summary>
            Set the width of the player
            <br/>
             Default: 640px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.height">
            <summary>
            Set the height of the player
            <br/>
             Default: 360px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.pip">
            <summary>
            Set to true or false to enable or disable picture-in-picture mode
            <br/>
              Only available when playing file URLs in certain browsers
            <br/>
             Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.stopOnUnmount">
            <summary>
            If you are using pip you may want to use stopOnUnmount={false} to continue playing in picture-in-picture mode even after ReactPlayer unmounts
            <br/>
             Default: true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.config">
            <summary>
            Override options for the various players, see config prop
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onReady">
            <summary>
            Called when media is loaded and ready to play. If playing is set to true, media will play immediately
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onStart">
            <summary>
            Called when media starts playing
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onPlay">
            <summary>
            Called when media starts or resumes playing after pausing or buffering
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onPause">
            <summary>
            Called when media is paused
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onEnded">
            <summary>
            Called when media finishes playing
            <br/>
            Does not fire when loop is set to true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.reverse">
            <summary>
                Specifies if the animation should make element(s) disappear.<br />
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.cascade">
            <summary>
                <br />Stagger its children animations.
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.childClassName">
            <summary>
                <br /> Class names to add to the child element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.childStyle">
            <summary>
                <br /> Inline styles to add to the child element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.damping">
            <summary>
                <br /> Factor that affects the delay that each animated element in a cascade animation will be assigned.
                <br />  @default 0.5
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.delay">
            <summary>
                <br /> Initial delay, in milliseconds.
                <br /> @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.duration">
            <summary>
                <br /> Animation duration, in milliseconds.
                <br /> @default 1000
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.fraction">
            <summary>
                <br /> Float number between 0 and 1 indicating how much the element should be in viewport before the animation is
                triggered.
                <br /> @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.triggerOnce">
            <summary>
                <br /> Specifies if the animation should run only once or everytime the element enters/exits/re-enters the
                viewport.
                <br /> @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.AttentionSeeker.effect">
            <summary>
                The animation effect to use for this attention seeker.
                <br />
                <br />"bounce" | "flash" | "headShake" | "heartBeat" | "jello" | "pulse" | "rubberBand" | "shake" | "shakeX" |
                "shakeY" | "swing" | "tada" | "wobble"
                <br />  @default "bounce"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Bounce.direction">
            <summary>
                <br /> Origin of the animation.
                <br />"down" | "left" | "right" | "up"
                <br />  @default undefined
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Fade.big">
            <summary>
                <br /> Causes the animation to start farther. Only works with "down", "left", "right" and "up" directions.
                <br /> @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Fade.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br /> "bottom-left" | "bottom-right" | "down" | "left" | "right" | "top-left" | "top-right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Flip.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br /> "horizontal" | "vertical"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Rotate.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "bottom-left" | "bottom-right" | "top-left" | "top-right"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Slide.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "down" | "left" | "right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Zoom.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "down" | "left" | "right" | "up"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar">
            <summary>
            https://www.npmjs.com/package/react-free-scrollbar
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.fixed">
            <summary>
            You can pass fixed to decide if handler's position: fixed or static. If fixed equals true, then the handler will overlap the content inside the scroller.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.autohide">
            <summary>
            Set true if you want a macOS style auto-hide scroller.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.timeout">
            <summary>
            The time length of the handler disappears. Default: 2000
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.tracksize">
            <summary>
            The width of the vertical handler or the height of the horizontal handler. Default: 10px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.start">
            <summary>
            The starting position of the scroll area, can be descriptive string or an object.
            <br/>
            Options: "bottom", "bottom right", "top right", "right", {top: 20, left: 30}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.browserOffset">
            <summary>
            The browser scroll bar width. Default: "17px". It should fit for most browsers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.onScrollbarScrollTimeout">
            <summary>
            This timeout adds a throttle for onScrollbarScroll. Default is 300. Set to 0 to remove throttle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSuite.Uploader.onSuccess">
            <summary>
               callback function after successful upload
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.start">
            <summary>
                required
                can be a reference to a react ref to html element or string - an id of a DOM element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.end">
            <summary>
                required
                can be a reference to a react ref to html element or string - an id of a DOM element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.startAnchor">
            <summary>
                "auto" | "middle" | "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.endAnchor">
            <summary>
                "auto" | "middle" | "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.color">
            <summary>
                defines color to the entire arrow. lineColor,headColor and tailColor will override color specifically for line,tail
                or head
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.strokeWidth">
            <summary>
                defines the thickness of the entire arrow. headSize and tailSize defines how big will be the head or tail relative
                to the strokeWidth
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.path">
            <summary>
                can be one of: "smooth" | "grid" | "straight", and it controls the path arrow is drawn, exactly how their name
                suggest
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.curveness">
            <summary>
                defines how much the lines curve. makes a difference only in path='smooth'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.dashness">
            <summary>
                can make the arrow dashed and can even animate. if true default values(for dashness) are chosen. if object is passed then default values are chosen except what passed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.animateDrawing">
            <summary>
                can animate the drawing of the arrow using svg animation. type: boolean|number. if true animation duration is 1s.
                if number is passed then animation duration is number's value in seconds
                <example>animateDrawing={0.1} will animate the drawing of the arrow in 100 milliseconds.</example>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.headShape">
            <summary>
            you can customize the svg edges (head or tail) of the arrow. you can use predefined svg by passing string,one of "arrow1" | "circle" | "heart"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.tailShape">
            <summary>
            you can customize the svg edges (head or tail) of the arrow. you can use predefined svg by passing string,one of "arrow1" | "circle" | "heart"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries._ReactQuill_.ReactQuill.valueBindDebounceHandler">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries._ReactQuill_.ReactQuill.valueBindDebounceTimeout">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries._Swiper_.Swiper.breakpoints">
            <summary>
            Sample: <br/>
            // when window width is &gt;= 320px <br/>
            320: { <br/>
             slidesPerView: 2, <br/>
             spaceBetween: 20 <br/>
            },
            <br/>
            <br/>
            // when window width is &gt;= 480px <br/>
            480: { <br/>
              slidesPerView: 3, <br/>
              spaceBetween: 30 <br/>
            }<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries._Swiper_.SwiperGridOption.fill">
            <summary>
                Can be 'column' or 'row'. Defines how slides should fill rows, by column or by row
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyReactComponent.className">
            <summary>
                Gets or sets the name of the class.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyReactComponent.style">
            <summary>
                Gets the style.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyReactComponent.SuspenseFallback">
            <summary>
                This is designed for Suspense part of react. When page first rendered as pure html.
                <br />
                When react component fully loaded then this element will be replace by original component.
                <br />
                Default value is simple empty div element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.UIDesigner.ReactWithDotNetDesigner.IsInDesignMode(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
                Indicates component is in design mode.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ReactWithDotNetJavaScriptFiles.Timeout">
            <summary>
                Default value is 365 day
            </summary>
        </member>
    </members>
</doc>
