import React, { useState } from "react";
import { BasePage, useMessage, useStore, useDevice, useNav } from "b-digital-framework";
import { useApplicationContext } from "b-boa-base";
import { moduleLogger } from "b-log";
import { TextValuePair } from "b-digital-internet-banking";
import { BDigitalGroupView } from "b-digital-group-view";
import { BComboBox } from "b-combo-box";
import { BDigitalGrid } from "b-digital-grid";
import { BDigitalBox } from "b-digital-box";
import { BButton } from "b-button";
import { BCheckBox } from "b-check-box";
import { BInput } from "b-input";
import { BInputMaskExtended } from "b-input-mask-extended";
import { BDigitalMoneyInput } from "b-digital-money-input";

import { ManuelProvisionModel, PurchaseResultViewModel } from '../../../models';
import { useMobilePosService } from "../../../services/useMobilePosService";
import { CurrencyModel, GetManuelProvisionPreDataClientRequest, ManuelProvisionClientRequest, ManuelProvisionClientResponse } from "../../../types";


export const ManuelProvisionForm = () => {
    const { getMessage } = useMessage("POSPortal");
    const logger = moduleLogger("POSPortalLogger");
    const context = useApplicationContext();
    const store = useStore();
    const { isMobile, isTablet } = useDevice();
    const { navigateByAction, navigatePage } = useNav();

    const { getManuelProvisionPreData, manuelProvision } = useMobilePosService();

    const initialModel: ManuelProvisionModel = {
        isInitialize: false,
        fecId: 0,
        amount: undefined,
        nameAndSurname: undefined,
        cardNumber: undefined,
        cardExpireMonthYear: undefined, // MM/YY format
        cardExpireDateMonth: undefined,
        cardExpireDateYear: undefined,
        cvv2: undefined,
        installmentNumber: 0, // Default to cash payment
        deferringNumber: 0, // Default to no deferring
        is3DSecure: false
    };
    const [model, setModel] = React.useState<ManuelProvisionModel>((store?.transactionContext?.data as ManuelProvisionModel) || initialModel);
    const [currencySelectList, setCurrencySelectList] = useState<Array<TextValuePair> | undefined>();
    const [installmentMonthList, setInstallmentMonthList] = useState<Array<TextValuePair> | undefined>();
    const [deferringMonthList, setDeferringMonthList] = useState<Array<TextValuePair> | undefined>();

    React.useEffect(() => {
        logger.info("ManuelProvisionForm page mounted info log");

        const controller = new AbortController();

        const handleGetManuelProvisionPreData = async (controller: AbortController) => {

            logger.info("handleGetManuelProvisionPreData started");

            var getManuelProvisionPreDataRequest: GetManuelProvisionPreDataClientRequest = {};

            var getManuelProvisionPreDataResponse = await getManuelProvisionPreData.send(getManuelProvisionPreDataRequest, controller.signal)
            if (!getManuelProvisionPreDataResponse.success) {
                logger.error("Failed to fetch data:", getManuelProvisionPreDataResponse.result);
                return;
            }

            const {
                currencyList,
                maxInstallmentCount,
                maxDeferringCount,
            } = getManuelProvisionPreDataResponse;

            setCurrencySelectList(currencyList.map<TextValuePair>((item: CurrencyModel) => { return { value: item.fecId.toString(), text: item.fecCode }; }));

            var installmentList = maxInstallmentCount > 0 ? [...Array(maxInstallmentCount - 1).keys()]
                .map<TextValuePair>((item) => {
                    return { value: (item + 2).toString(), text: (item + 2).toString() };
                }) : [];
            var cashItem: TextValuePair = { value: '0', text: getMessage('Cash') };
            installmentList.unshift(cashItem);
            setInstallmentMonthList(installmentList);

            var deferringList = maxDeferringCount > 0 ? [...Array(maxDeferringCount - 1).keys()]
                .map<TextValuePair>((item) => {
                    return { value: (item + 1).toString(), text: (item + 1).toString() };
                }) : [];
            var noDeferringItem: TextValuePair = { value: '0', text: getMessage('Cash') };
            deferringList.unshift(noDeferringItem);
            setDeferringMonthList(deferringList);

            setModel({
                ...model,
                fecId: 0,
                installmentNumber: 0, // Default to cash payment
                deferringNumber: 0, // Default to no deferring
            });


            logger.info("handleGetManuelProvisionPreData finished");
        }

        handleGetManuelProvisionPreData(controller).catch((error) => {
            if (error.name !== "AbortError") {
                logger.error("Failed to fetch data:", error);
            }
        });
        return () => {
            controller.abort();
        };
    }, []);

    React.useEffect(() => {
        store?.setTransactionContext({
            ...store.transactionContext,
            data: model,
            nextPageAction: handleNextAction,
        });
    }, [model]);

    const handleNextAction = async () => {
        const clientRequest: ManuelProvisionClientRequest = {
            amount: model.amount,
            fecId: model.fecId,
            cardHolderName: model.nameAndSurname,
            cardNumber: model.cardNumber,
            cardExpireDateMonth: model.cardExpireDateMonth,
            cardExpireDateYear: model.cardExpireDateYear,
            cardCVV2: model.cvv2,
            description: model.description,
            is3DSecure: model.is3DSecure
        };
        const response = await manuelProvision.send(clientRequest, new AbortController().signal);
        if (!response.success) {
            store.setMessage({ content: response.result?.errorMessage });
            logger.error("Failed to process Manuel Provision:", JSON.stringify(response));
            return;
        }
        store.setTransactionContext({
            ...store.transactionContext,
            data: {
                paymentToken: response.paymentToken,
                isSuccess: true,
            } as PurchaseResultViewModel,
            nextPageAction: undefined,
        });

        // TODO: Get this link from the response
        const paymentUrl = "https://cebimpospaytest.kuveytturk.com.tr/api/payment/load3d?token=" + response.paymentToken + "&lang=tr";

        try {
            const isSuccess = await openPopupWindowAsync(paymentUrl, "_blank", 700, 700);
            if (isSuccess) {
                navigateByAction("mobilepos", "purchase-success-result-view", true);
            }
            else {
                navigateByAction("mobilepos", "purchase-fail-result-view", true);
            }

        }
        catch (error) {
            store.setMessage({ content: getMessage("PopupBlockedError") });
            logger.error("Failed to open payment URL:", error);
        }
    };

    const openPopupWindowAsync = (url: string, windowName: string, width: number, height: number) => new Promise((resolve, reject) => {
        const top = window.top.outerHeight / 2 + window.top.screenY - (height / 2);
        const left = window.top.outerWidth / 2 + window.top.screenX - (width / 2);
        var popup = window.open(url, windowName, `popup=true,width=${width},height=${height},top=${top},left=${left}`);
        if (!popup) {
            reject(new Error("Popup blocked or failed to open"));
            return;
        }

        const interval = setInterval(() => {
            const isFinished = popup.closed || popup.location.href.includes("success") || popup.location.href.includes("fail") || popup.location.href.includes("error");
            const isSuccess = popup.location.href.includes("succes");
            if (isFinished) {
                clearInterval(interval);
                resolve(isSuccess);
            }
        }, 500);
    });

    const handleClick = () => {
        if (model.amount === undefined || !model.nameAndSurname || !model.cardNumber || !model.cardExpireMonthYear) {
            return;
        }
        console.log("Get Paid button clicked");
        handleNextAction();
    };

    const fecCode = currencySelectList?.find((item) => item.value === model.fecId.toString())?.text;
    const cardExpireDateMonthYearString =
        model.cardExpireDateMonth + '/' + model.cardExpireDateYear;

    return (
        <BasePage pageTitle={getMessage("ManuelCardPaymentPageTitle")}>
            <BDigitalBox styleContext="noMargin" sx={{ py: 2 }}></BDigitalBox>
            <BDigitalGroupView title={"abc_"+getMessage("PaymentInfoGroupTitle")}>
                <BDigitalGrid container justifyContent="space-between" spacing={1} alignItems="center" >
                    <BDigitalGrid item xs={12} lg={6}>
                        <BDigitalMoneyInput
                            id="inpPrice"
                            value={model.amount}
                            fec={fecCode}
                            currencyVisible={false}
                            handleMoneyInputChange={(value: number) => {
                                setModel({ ...model, amount: value });
                            }}
                            inputProps={{ valueConstraint: { required: true }, autoComplete: "off" }}
                        />
                    </BDigitalGrid>
                    <BDigitalGrid item xs={12} lg={6}>
                        <BComboBox
                            id="cmbCurrency"
                            dataSource={currencySelectList}
                            labelText={getMessage("CurrencyLabel")}
                            hintText={getMessage("CurrencySelectHint")}
                            fullWidth={false}
                            value={[model.fecId]}
                            onSelect={(selectedIndexes: [number], selectedItems: [TextValuePair], selectedValues: [string]) => {
                                setModel({ ...model, fecId: parseInt(selectedItems[0].value) });
                            }}
                        />
                    </BDigitalGrid>
                </BDigitalGrid>
                <BInput
                    id="inpCardHolderNameSurname"
                    valueConstraint={{ required: true }}
                    context={context}
                    floatingLabelText={getMessage("CardHolderNameSurnameLabel")}
                    value={model.nameAndSurname}
                    autoComplete="off"
                    onChange={(e: any, value: any) => {
                        model.nameAndSurname = value;
                    }}
                />
                <BInputMaskExtended
                    floatingLabelText={getMessage('CardNumberLabel')}
                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, ' ', /[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/]}
                    hintText={'0000 0000 0000 0000'}
                    value={model.cardNumber}
                    onChange={(e: any, value: string) => {
                        setModel({ ...model, cardNumber: value.replace(' ', '') });
                    }}
                    valueConstraint={{ required: true, autoComplete: "off" }}
                />
                <BDigitalGrid container justifyContent="space-between" spacing={1} alignItems="center" wrap="nowrap">
                    <BDigitalGrid item xs={6}>
                        <BInputMaskExtended
                            floatingLabelText={getMessage("CardMonthYearLabel")}
                            mask={[/[0-1]/, /[0-9]/, '/', /[0-9]/, /[0-9]/,]}
                            hintText={'00/00'}
                            value={model.cardExpireMonthYear}
                            onChange={(e: any, value: string) => {
                                const [monthStr, yearStr] = value.split('/');
                                setModel({
                                    ...model,
                                    cardExpireMonthYear: value,
                                    cardExpireDateMonth: parseInt(monthStr),
                                    cardExpireDateYear: parseInt(yearStr)
                                });
                                require: true;
                                autoComplete: "off"
                            }}
                        />
                    </BDigitalGrid>
                    <BDigitalGrid item xs={6}>
                        <BInput
                            id="cVV"
                            floatingLabelText={getMessage("CardCVV2Label")}
                            value={model.cvv2}
                            maxLength={15}
                            onBlur={(e: any, value: string) => {
                                setModel({ ...model, cvv2: value });
                            }}
                            valueConstraint={{ required: true, autoComplete: "off" }} />
                    </BDigitalGrid>
                </BDigitalGrid>

                <BComboBox
                    id="cmbInstallmentList"
                    dataSource={installmentMonthList}
                    labelText={getMessage("InstallmentSelectionLabel")}
                    hintText={getMessage("InstallmentSelectionHint")}
                    hiddenClearButton={true}
                    value={[model.installmentNumber]}
                    onSelect={(selectedIndexes: [number], selectedItems: [TextValuePair], selectedValues: [string]) => {
                        setModel({ ...model, installmentNumber: parseInt(selectedItems[0].value) });
                    }}
                />

                <BComboBox
                    id="cmbDeferringList"
                    dataSource={deferringMonthList}
                    labelText={getMessage("DeferringSelectionLabel")}
                    hintText={getMessage("DeferringSelectionHint")}
                    hiddenClearButton={true}
                    value={[model.deferringNumber]}
                    onSelect={(selectedIndexes: [number], selectedItems: [TextValuePair], selectedValues: [string]) => {
                        setModel({ ...model, deferringNumber: parseInt(selectedItems[0].value) });
                    }}
                />
                <BInput
                    id="inpDescription"
                    valueConstraint={{ required: false }}
                    context={context}
                    floatingLabelText={getMessage("DescriptionLabel")}
                    value={model.description}
                    autoComplete="off"
                    onChange={(e: any, value: any) => {
                        model.description = value;
                    }}
                />
                <BCheckBox context={context}
                    checked={model.is3DSecure}
                    label={getMessage("PayWithThreeDCheckLabel")}
                    onCheck={(e: any, checked: boolean) => {
                        setModel({ ...model, is3DSecure: checked });
                    }}
                />
            </BDigitalGroupView>

            <BDigitalGrid container direction="row" justifyContent="flex-end" >
                <BDigitalGrid item xs={isMobile ? 12 : undefined}>
                    <BButton
                        id="btnGetPaid"
                        type="contained"
                        text={getMessage("GetPaidButtonLabel")}
                        fullWidth={isMobile}
                        style={{
                            backgroundColor: context.theme.boaPalette.pri500,
                            color: context.theme.boaPalette.comp500,
                            minWidth: context.theme.spacing(20),
                            padding: isTablet ? context.theme.spacing(1, 8) : context.theme.spacing(1, 1.75),
                        }}
                        onClick={handleClick}
                        />
                </BDigitalGrid>
            </BDigitalGrid >
        </BasePage >
    );
};




<svg width="198" height="190" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#a)">
        <g opacity=".9">
            <path opacity=".2" d="M63.934 12.031S29.419 29.864 12.205 57.343a76.71 76.71 0 0 0 5.066 89.072c20.917 26.24 60.9 22.794 94.374 39.417 33.223 11.4 64.3-1.608 79.84-26.589 15.83-35.217-1.642-43.813-5.741-84.565-4.099-40.752-40.327-100.44-121.81-62.647Z" fill="#0288D1"/>
        </g>
        <path opacity=".7" d="M157.882 135.705a38.844 38.844 0 0 0 18.734-57.067 38.853 38.853 0 0 0-59.626-7.24 38.846 38.846 0 0 0-9.378 42.137 38.852 38.852 0 0 0 50.27 22.17Z" fill="#007AFF"/>
        <path d="M143.81 101.642a16.129 16.129 0 0 0 15.819-19.27 16.128 16.128 0 1 0-15.819 19.27ZM114.371 124.806a31.503 31.503 0 0 1 11.795-13.17 31.499 31.499 0 0 1 17.033-4.738 34.29 34.29 0 0 1 30.118 17.908s-9.515 14.075-30.525 13.566a36.862 36.862 0 0 1-28.421-13.566Z" fill="#fff"/>
        <path d="M91.734 14.481H72.54A10.97 10.97 0 0 0 61.572 25.45v19.194A10.968 10.968 0 0 0 72.54 55.612h19.194a10.969 10.969 0 0 0 10.97-10.968V25.45a10.976 10.976 0 0 0-3.213-7.757 10.968 10.968 0 0 0-7.757-3.212Z" fill="#5856D6"/>
        <path d="M84.53 30.805a.696.696 0 0 1-.514-.2.684.684 0 0 1-.2-.5.662.662 0 0 1 .2-.495.7.7 0 0 1 .513-.2h6.213a.685.685 0 0 1 .704.694.7.7 0 0 1-.704.705l-6.213-.004Zm0 4.461a.701.701 0 0 1-.718-.717.646.646 0 0 1 .2-.484.7.7 0 0 1 .513-.2h6.213a.685.685 0 0 1 .651.42.648.648 0 0 1 .05.263.696.696 0 0 1-.7.717l-6.21.001Zm0 4.45a.699.699 0 0 1-.665-.421.646.646 0 0 1-.049-.263.698.698 0 0 1 .2-.506.685.685 0 0 1 .513-.211h6.213a.67.67 0 0 1 .5.211.698.698 0 0 1 .2.506.648.648 0 0 1-.2.484.679.679 0 0 1-.5.199l-6.213.001Zm-11.859.08a.512.512 0 0 1-.41-.171.635.635 0 0 1-.138-.421c.024-.365.127-.72.3-1.042a5.098 5.098 0 0 1 2.48-2.35 5.881 5.881 0 0 1 4.424 0 5.082 5.082 0 0 1 2.485 2.35c.173.322.276.677.3 1.042a.637.637 0 0 1-.137.421.512.512 0 0 1-.41.171H72.67Zm4.438-5.21a2.338 2.338 0 0 1-1.758-.773 2.89 2.89 0 0 1-.4-3.277 2.67 2.67 0 0 1 .9-.968 2.34 2.34 0 0 1 2.51 0 2.714 2.714 0 0 1 1.234 2.3 2.73 2.73 0 0 1-.728 1.945 2.332 2.332 0 0 1-1.766.771l.008.002ZM72 45.03h19.688a3.667 3.667 0 0 0 2.686-.882 3.563 3.563 0 0 0 .888-2.635V27.606a3.583 3.583 0 0 0-.888-2.641 3.65 3.65 0 0 0-2.685-.887H72a3.667 3.667 0 0 0-2.68.882 3.563 3.563 0 0 0-.894 2.646v13.908a3.546 3.546 0 0 0 .894 2.635 3.669 3.669 0 0 0 2.68.881Z" fill="#fff"/>
        <path d="M93.562 142.437H74.368A10.971 10.971 0 0 0 63.4 153.405v19.194a10.97 10.97 0 0 0 10.968 10.968h19.194a10.965 10.965 0 0 0 10.97-10.963V153.41a10.96 10.96 0 0 0-3.211-7.759 10.961 10.961 0 0 0-7.76-3.214Z" fill="#32ADE6"/>
        <path d="M85.742 175.25a11.787 11.787 0 0 0 4.746-.963 12.62 12.62 0 0 0 3.917-2.657 12.466 12.466 0 0 0 2.663-3.923 12.19 12.19 0 0 0 0-9.483 12.653 12.653 0 0 0-6.592-6.585 12.151 12.151 0 0 0-9.182-.116 12.601 12.601 0 0 0-6.452 5.83 11.892 11.892 0 0 0-1.3 4.278 7.699 7.699 0 0 1 4.886.652 8.069 8.069 0 0 1 2.656 2.136 7.39 7.39 0 0 1 1.477 3.024c.496-.124 1-.215 1.508-.274.552-.067 1.107-.1 1.663-.1a13.22 13.22 0 0 1 3.326.392c.91.223 1.786.568 2.605 1.024a6.202 6.202 0 0 1 1.686 1.344 9.787 9.787 0 0 1-2.113 1.785c-.808.513-1.683.913-2.6 1.187a9.96 9.96 0 0 1-2.9.422 10.18 10.18 0 0 1-1.892-.181 9.282 9.282 0 0 1-1.818-.53 4.706 4.706 0 0 1-.411.8 7.228 7.228 0 0 1-.686.921c.749.33 1.53.582 2.33.752.817.176 1.648.265 2.483.265Zm-.012-10.231a3.904 3.904 0 0 1-2.1-.609 4.246 4.246 0 0 1-1.488-1.621 4.824 4.824 0 0 1-.548-2.312 4.531 4.531 0 0 1 2.036-3.85 3.9 3.9 0 0 1 4.187 0 4.452 4.452 0 0 1 1.489 1.621c.37.684.558 1.452.548 2.229a4.852 4.852 0 0 1-.548 2.331 4.301 4.301 0 0 1-1.488 1.632 3.723 3.723 0 0 1-2.088.579Zm-10.724 10.365a5.828 5.828 0 0 0 2.35-.483 6.348 6.348 0 0 0 1.958-1.322 6.206 6.206 0 0 0 1.33-1.955 5.86 5.86 0 0 0 .484-2.363 5.95 5.95 0 0 0-.476-2.373 6.221 6.221 0 0 0-3.273-3.266 6.13 6.13 0 0 0-4.735 0c-.73.31-1.392.758-1.951 1.319a6.356 6.356 0 0 0-1.326 1.952 6.064 6.064 0 0 0 0 4.741 6.273 6.273 0 0 0 1.326 1.952 6.209 6.209 0 0 0 1.952 1.319c.746.32 1.55.483 2.36.479Zm-1.736-3.279a.637.637 0 0 1-.548.217.873.873 0 0 1-.776-.782.68.68 0 0 1 .217-.548l1.759-1.765-1.615-1.64a.709.709 0 0 1-.217-.524.676.676 0 0 1 .217-.513.72.72 0 0 1 .236-.153.775.775 0 0 1 .553 0 .72.72 0 0 1 .236.153l1.645 1.628 1.764-1.771a.657.657 0 0 1 .55-.204c.201.013.39.098.532.241.15.145.24.34.254.548a.646.646 0 0 1-.217.548l-1.764 1.758 1.625 1.628c.133.141.205.33.2.524a.692.692 0 0 1-.2.513.753.753 0 0 1-.518.211.695.695 0 0 1-.518-.211l-1.64-1.628-1.775 1.77Z" fill="#fff"/>
        <path d="M37.808 81.203H18.613A10.968 10.968 0 0 0 7.645 92.171v19.194a10.969 10.969 0 0 0 10.968 10.968h19.195a10.973 10.973 0 0 0 10.134-6.77c.551-1.331.835-2.758.835-4.198V92.171a10.967 10.967 0 0 0-10.969-10.968Z" fill="#FF2D55"/>
        <path d="M16.056 110.543h24.459c.393.027.787-.031 1.155-.17a2.746 2.746 0 0 0 1.614-1.614c.139-.368.197-.762.17-1.155v-15.25a2.891 2.891 0 0 0-.783-2.15 2.928 2.928 0 0 0-2.157-.776H16.056a2.745 2.745 0 0 0-2.926 2.926v15.251a2.915 2.915 0 0 0 .781 2.155 2.904 2.904 0 0 0 2.145.783Zm.038-2.048a.863.863 0 0 1-.862-.557.866.866 0 0 1-.055-.359V92.392a.9.9 0 0 1 .248-.675.916.916 0 0 1 .667-.241h24.4a.916.916 0 0 1 .667.241.9.9 0 0 1 .248.675v15.187a.87.87 0 0 1-.557.86.86.86 0 0 1-.359.056H16.094Zm8.178 5.073h8.039v-3.191h-8.039v3.191Zm-.077 1.487h8.192a.984.984 0 0 0 .718-.299 1.022 1.022 0 0 0-.144-1.587 1.027 1.027 0 0 0-.574-.173h-8.191a1.019 1.019 0 0 0-.725.299 1.027 1.027 0 0 0 .15 1.59c.17.113.37.174.575.173l-.001-.003Z" fill="#fff"/>
        <path d="M28.871 105.915a5.885 5.885 0 0 0 2.373-.483 6.293 6.293 0 0 0 3.29-3.293 6.056 6.056 0 0 0 0-4.738 6.305 6.305 0 0 0-3.29-3.29 6.088 6.088 0 0 0-4.751 0 6.308 6.308 0 0 0-3.286 3.29 6.064 6.064 0 0 0 0 4.738 6.32 6.32 0 0 0 3.292 3.293 5.88 5.88 0 0 0 2.372.483Zm-2.025-3.615a.478.478 0 0 1-.35-.148.49.49 0 0 1-.144-.353.473.473 0 0 1 .144-.349l1.675-1.674-1.674-1.67a.482.482 0 0 1-.144-.349.474.474 0 0 1 .304-.46.488.488 0 0 1 .188-.033.506.506 0 0 1 .35.137l1.681 1.675 1.693-1.675a.472.472 0 0 1 .342-.144.48.48 0 0 1 .19.036c.12.051.217.147.268.268a.48.48 0 0 1 .036.19.501.501 0 0 1-.144.355l-1.679 1.67 1.674 1.669a.46.46 0 0 1 .144.355.486.486 0 0 1-.144.353.488.488 0 0 1-.355.149.488.488 0 0 1-.193-.034.484.484 0 0 1-.162-.11l-1.67-1.675-1.662 1.674a.505.505 0 0 1-.368.143Z" fill="#fff"/>
        <path opacity=".8" d="M110.041 52.01a.457.457 0 1 0-.912-.057.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".9" d="M106.842 51.097a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path d="M103.643 50.642a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".7" d="M112.719 53.097a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".6" d="M115.341 55.095a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".5" d="M117.719 57.093a.457.457 0 1 0-.912-.059.457.457 0 0 0 .912.059Z" fill="#000"/>
        <path opacity=".4" d="M119.612 59.945a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".3" d="M120.827 62.74a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".2" d="M121.089 65.534a.457.457 0 1 0-.912-.058.457.457 0 0 0 .912.058Z" fill="#000"/>
        <path opacity=".4" d="M119.75 141.079a.456.456 0 1 0 .042-.912.456.456 0 0 0-.042.912Z" fill="#000"/>
        <path opacity=".3" d="M120.604 137.865a.458.458 0 1 0 .04-.915.458.458 0 0 0-.04.915Z" fill="#000"/>
        <path opacity=".2" d="M120.999 134.657a.458.458 0 1 0 .04-.915.458.458 0 0 0-.04.915Z" fill="#000"/>
        <path opacity=".5" d="M118.714 143.778a.457.457 0 1 0 .04-.913.457.457 0 0 0-.04.913Z" fill="#000"/>
        <path opacity=".6" d="M116.765 146.435a.456.456 0 1 0 .042-.912.456.456 0 0 0-.042.912Z" fill="#000"/>
        <path opacity=".7" d="M114.813 148.851a.457.457 0 1 0 .04-.913.457.457 0 0 0-.04.913Z" fill="#000"/>
        <path opacity=".8" d="M111.996 150.798a.458.458 0 1 0 .04-.915.458.458 0 0 0-.04.915Z" fill="#000"/>
        <path opacity=".9" d="M109.216 151.968a.458.458 0 1 0 .04-.915.458.458 0 0 0-.04.915Z" fill="#000"/>
        <path d="M106.436 152.379a.458.458 0 1 0 .04-.915.458.458 0 0 0-.04.915Z" fill="#000"/>
        <path opacity=".3" d="M96.474 106.061a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".2" d="M99.356 104.796a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM101.817 102.701a.457.457 0 1 0 .647-.644.457.457 0 0 0-.647.644Z" fill="#000"/>
        <path opacity=".3" d="M93.46 107.067a.457.457 0 1 0 .648-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".4" d="M90.648 107.951a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM87.603 108.592a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".5" d="M84.356 109.079a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM81.054 109.147a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".6" d="M77.755 109.237a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM74.538 109.073a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".7" d="M71.37 108.901a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".8" d="M68.07 108.471a.457.457 0 1 0 .648-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path opacity=".9" d="M65.223 107.974a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
        <path d="M62.376 107.476a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM59.529 106.669a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM56.546 105.577a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM53.563 104.292a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645ZM50.279 102.843a.457.457 0 1 0 .647-.645.457.457 0 0 0-.647.645Z" fill="#000"/>
    </g>
    <defs>
        <clipPath id="a">
            <path fill="#fff" transform="translate(.333)" d="M0 0h197.667v190H0z"/>
        </clipPath>
    </defs>
</svg>
